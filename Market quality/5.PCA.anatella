<?xml version="1.0" encoding="utf-8"?>
<ANATELLA version='2.27'>
<GlobalParameters wDirLoc='1'>
</GlobalParameters>
<WorkingSpace>AAAA/wAAAAD9AAAAAgAAAAEAAAEPAAAB0vwCAAAAAfsAAAAcAEEAbABsAEEAYwB0AGkAbwBuAHMARABvAGMAawEAAABeAAAB0gAAAHgA////AAAAAwAAB4AAAAGk/AEAAAAC+wAAACgAQQBjAHQAaQBvAG4AUAByAG8AcABlAHIAdABpAGUAcwBEAG8AYwBrAQAAAAAAAANfAAACfQD////8AAADZQAABBsAAAIiAP////oAAAABAQAAAAL7AAAADgBMAG8AZwBEAG8AYwBrAQAAAAD/////AAAAhQD////7AAAAGgBEAGEAdABhAFQAYQBiAGwAZQBEAG8AYwBrAQAAAAD/////AAACIgD///8AAAZrAAAB0gAAAAQAAAAEAAAACAAAAAj8AAAAAQAAAAIAAAADAAAAFgBtAGEAaQBuAFQAbwBvAGwAQgBhAHIBAAAAAP////8AAAAAAAAAAAAAABYAdABlAHgAdABUAG8AbwBsAEIAYQByAQAAAzv/////AAAAAAAAAAAAAAAeAGcAcgBvAHUAcABCAG8AeABUAG8AbwBsAEIAYQByAQAABhD/////AAAAAAAAAAA=</WorkingSpace>
<ACTIONS>
<readCSV idx='0' x='-345' y='-123' fileName=':/Standardised/BCH_restricted.csv'/>
<readCSV idx='1' x='-181' y='-29' fileName=':/Standardised/BTC_restricted.csv'/>
<readCSV idx='2' x='-173' y='66' fileName=':/Standardised/EOS_restricted.csv'/>
<readCSV idx='3' x='-178' y='158' fileName=':/Standardised/ETH_restricted.csv'/>
<readCSV idx='4' x='-183.545' y='255.682' fileName=':/Standardised/XRP_restricted.csv'/>
<MultiJoin module='DefaultActions' idx='5' x='77' y='-122' nPinIn='5'>
  <Join pin='1' mainKey='Rounded Time' slaveKey='Rounded Time' prefix='2' copyAll='0'>
  <c>Realized Spread</c>
  </Join>
  <Join pin='2' mainKey='Rounded Time' slaveKey='Rounded Time' prefix='3' copyAll='0'>
  <c>Realized Spread</c>
  </Join>
  <Join pin='3' mainKey='Rounded Time' slaveKey='Rounded Time' prefix='4' copyAll='0'>
  <c>Realized Spread</c>
  </Join>
  <Join pin='4' mainKey='Rounded Time' slaveKey='Rounded Time' prefix='5' copyAll='0'>
  <c>Realized Spread</c>
  </Join>
</MultiJoin>
<SelectColumns module='DefaultActions' idx='6' x='-195' y='-122' keep='1'>
 <c>Rounded Time</c>
 <c>Realized Spread</c>
</SelectColumns>
<SelectColumns module='DefaultActions' idx='7' x='258.108' y='-346.522' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<Python idx='8' x='389.896' y='-349.944' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<readCSV idx='11' x='1166.23' y='137.034' fileName=':/Standardised/XRP_standardised_15.csv'/>
<readCSV idx='12' x='1170' y='-71.8298' fileName=':/Standardised/BCH_standardised_15.csv'/>
<readCSV idx='13' x='1162.75' y='-180.207' fileName=':/Standardised/BTC_standardised_15.csv'/>
<readCSV idx='14' x='1168.66' y='41.1736' fileName=':/Standardised/EOS_standardised_15.csv'/>
<readCSV idx='15' x='1167.2' y='238.957' fileName=':/Standardised/ETH_standardised_15.csv'/>
<SelectColumns module='DefaultActions' idx='16' x='1331.71' y='-179.896' keep='1'>
 <c>Rounded Time</c>
 <c>Realized Spread (standardised)</c>
</SelectColumns>
<MultiJoin module='DefaultActions' idx='18' x='1464.31' y='-58.493' nPinIn='5'>
  <Join pin='1' mainKey='Rounded Time' slaveKey='Rounded Time' prefix='2' copyAll='0'>
  <c>Realized Spread (standardised)</c>
  </Join>
  <Join pin='2' mainKey='Rounded Time' slaveKey='Rounded Time' prefix='3' copyAll='0'>
  <c>Realized Spread (standardised)</c>
  </Join>
  <Join pin='3' mainKey='Rounded Time' slaveKey='Rounded Time' prefix='4' copyAll='0'>
  <c>Realized Spread (standardised)</c>
  </Join>
  <Join pin='4' mainKey='Rounded Time' slaveKey='Rounded Time' prefix='5' copyAll='0'>
  <c>Realized Spread (standardised)</c>
  </Join>
</MultiJoin>
<SelectColumns module='DefaultActions' idx='19' x='1647.21' y='-320.119' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<FilterRows module='MathParser' idx='785' x='261.414' y='-259.459' dateFormat='yyyy-MM-dd hh:mm:ss'>
 <Expression>dateTimeLE(rt, "2017-11-12 00:00:00")</Expression>
 <InputVars>
    <InputVar column='Rounded Time' label='rt' isNumber='0'/>
 </InputVars>
</FilterRows>
<FilterRows module='MathParser' idx='786' x='257.732' y='-162.503' dateFormat='yyyy-MM-dd hh:mm:ss'>
 <Expression>not(dateTimeLE(rt, "2018-04-21 00:00:00"))</Expression>
 <InputVars>
    <InputVar column='Rounded Time' label='rt' isNumber='0'/>
 </InputVars>
</FilterRows>
<FilterRows module='MathParser' idx='787' x='252.823' y='-66.7737' dateFormat='yyyy-MM-dd hh:mm:ss'>
 <Expression>(dateTimeLE(rt, "2018-01-28 00:00:00")) &amp;&amp; (not(dateTimeLE(rt, "2017-12-28 00:00:00")))</Expression>
 <InputVars>
    <InputVar column='Rounded Time' label='rt' isNumber='0'/>
 </InputVars>
</FilterRows>
<FilterRows module='MathParser' idx='788' x='261.414' y='28.9553' dateFormat='yyyy-MM-dd hh:mm:ss'>
 <Expression>(dateTimeLE(rt, "2018-02-28 00:00:00")) &amp;&amp; (not(dateTimeLE(rt, "2018-01-28 00:00:00")))</Expression>
 <InputVars>
    <InputVar column='Rounded Time' label='rt' isNumber='0'/>
 </InputVars>
</FilterRows>
<SelectColumns module='DefaultActions' idx='789' x='391.507' y='-253.323' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<SelectColumns module='DefaultActions' idx='790' x='390.28' y='-163.73' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<SelectColumns module='DefaultActions' idx='791' x='387.825' y='-66.7737' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<SelectColumns module='DefaultActions' idx='792' x='392.735' y='27.728' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<Python idx='793' x='520.373' y='-252.095' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<Python idx='794' x='521.601' y='-164.957' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<Python idx='795' x='522.828' y='-74.1375' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<Python idx='796' x='524.055' y='27.728' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<Python idx='797' x='562.005' y='547.909' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<Python idx='798' x='560.778' y='651.002' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<Python idx='799' x='562.005' y='741.822' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<Python idx='800' x='562.005' y='827.732' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<SelectColumns module='DefaultActions' idx='801' x='423.321' y='551.591' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<SelectColumns module='DefaultActions' idx='802' x='419.639' y='643.638' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<SelectColumns module='DefaultActions' idx='803' x='422.094' y='732.003' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<SelectColumns module='DefaultActions' idx='804' x='423.321' y='822.823' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<FilterRows module='MathParser' idx='805' x='290.773' y='550.364' dateFormat='yyyy-MM-dd hh:mm:ss'>
 <Expression>dateTimeLE(rt, "2017-11-12 00:00:00")</Expression>
 <InputVars>
    <InputVar column='Rounded Time' label='rt' isNumber='0'/>
 </InputVars>
</FilterRows>
<FilterRows module='MathParser' idx='806' x='295.682' y='647.32' dateFormat='yyyy-MM-dd hh:mm:ss'>
 <Expression>not(dateTimeLE(rt, "2018-04-21 00:00:00"))</Expression>
 <InputVars>
    <InputVar column='Rounded Time' label='rt' isNumber='0'/>
 </InputVars>
</FilterRows>
<FilterRows module='MathParser' idx='808' x='301.819' y='735.685' dateFormat='yyyy-MM-dd hh:mm:ss'>
 <Expression>(dateTimeLE(rt, "2018-01-28 00:00:00")) &amp;&amp; (not(dateTimeLE(rt, "2017-12-28 00:00:00")))</Expression>
 <InputVars>
    <InputVar column='Rounded Time' label='rt' isNumber='0'/>
 </InputVars>
</FilterRows>
<FilterRows module='MathParser' idx='809' x='306.728' y='822.823' dateFormat='yyyy-MM-dd hh:mm:ss'>
 <Expression>(dateTimeLE(rt, "2018-02-28 00:00:00")) &amp;&amp; (not(dateTimeLE(rt, "2018-01-28 00:00:00")))</Expression>
 <InputVars>
    <InputVar column='Rounded Time' label='rt' isNumber='0'/>
 </InputVars>
</FilterRows>
<SelectColumns module='DefaultActions' idx='810' x='294.455' y='442.362' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<Python idx='811' x='420.866' y='438.68' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<MultiJoin module='DefaultActions' idx='812' x='113.802' y='607.567' nPinIn='5'>
  <Join pin='2' mainKey='Rounded Time' slaveKey='Rounded Time' prefix='3' copyAll='0'>
  <c>PPI</c>
  </Join>
  <Join pin='1' mainKey='Rounded Time' slaveKey='Rounded Time' prefix='2' copyAll='0'>
  <c>PPI</c>
  </Join>
  <Join pin='3' mainKey='Rounded Time' slaveKey='Rounded Time' prefix='4' copyAll='0'>
  <c>PPI</c>
  </Join>
  <Join pin='4' mainKey='Rounded Time' slaveKey='Rounded Time' prefix='5' copyAll='0'>
  <c>PPI</c>
  </Join>
</MultiJoin>
<readCSV idx='813' x='-155.963' y='817.914' fileName=':/Standardised/XRP_restricted.csv'/>
<readCSV idx='814' x='-153.508' y='718.503' fileName=':/Standardised/ETH_restricted.csv'/>
<readCSV idx='815' x='-147.611' y='618.613' fileName=':/Standardised/EOS_restricted.csv'/>
<readCSV idx='816' x='-141.235' y='535.636' fileName=':/Standardised/BTC_restricted.csv'/>
<SelectColumns module='DefaultActions' idx='817' x='-142.462' y='444.816' keep='1'>
 <c>Rounded Time</c>
 <c>PPI</c>
</SelectColumns>
<readCSV idx='818' x='-320.42' y='442.362' fileName=':/Standardised/BCH_restricted.csv'/>
<readCSV idx='819' x='-187.632' y='1710.1' fileName=':/Standardised/XRP_restricted.csv'/>
<readCSV idx='820' x='-189.114' y='1606.37' fileName=':/Standardised/ETH_restricted.csv'/>
<readCSV idx='821' x='-190.596' y='1508.56' fileName=':/Standardised/EOS_restricted.csv'/>
<readCSV idx='822' x='-187.617' y='1413.75' fileName=':/Standardised/BTC_restricted.csv'/>
<SelectColumns module='DefaultActions' idx='823' x='-186.076' y='1324.85' keep='1'>
 <c>Rounded Time</c>
 <c>Illiq</c>
</SelectColumns>
<readCSV idx='824' x='-173.022' y='2566.14' fileName=':/Standardised/XRP_restricted.csv'/>
<readCSV idx='825' x='-164.131' y='2468.34' fileName=':/Standardised/ETH_restricted.csv'/>
<readCSV idx='826' x='-174.783' y='4071.39' fileName=':/Standardised/XRP_restricted.csv'/>
<readCSV idx='827' x='-170.889' y='3327.89' fileName=':/Standardised/XRP_restricted.csv'/>
<readCSV idx='828' x='-168.855' y='3979.52' fileName=':/Standardised/ETH_restricted.csv'/>
<readCSV idx='829' x='-169.422' y='3237.45' fileName=':/Standardised/ETH_restricted.csv'/>
<readCSV idx='830' x='-165.613' y='2374.98' fileName=':/Standardised/EOS_restricted.csv'/>
<readCSV idx='831' x='-159.949' y='3881.74' fileName=':/Standardised/EOS_restricted.csv'/>
<readCSV idx='832' x='-166.458' y='3151.51' fileName=':/Standardised/EOS_restricted.csv'/>
<readCSV idx='833' x='-164.131' y='2278.66' fileName=':/Standardised/BTC_restricted.csv'/>
<readCSV idx='834' x='-157' y='3780.95' fileName=':/Standardised/BTC_restricted.csv'/>
<readCSV idx='835' x='-164.976' y='3044.81' fileName=':/Standardised/BTC_restricted.csv'/>
<SelectColumns module='DefaultActions' idx='836' x='-162.62' y='2182.39' keep='1'>
 <c>Rounded Time</c>
 <c>Abs (Autocorrelation)</c>
</SelectColumns>
<SelectColumns module='DefaultActions' idx='837' x='-149.591' y='3693.52' keep='1'>
 <c>Rounded Time</c>
 <c>SD(Return 5min)</c>
</SelectColumns>
<SelectColumns module='DefaultActions' idx='838' x='-163.465' y='2944.1' keep='1'>
 <c>Rounded Time</c>
 <c>Realized Volatility</c>
</SelectColumns>
<readCSV idx='839' x='-356.566' y='1330.74' fileName=':/Standardised/BCH_restricted.csv'/>
<readCSV idx='840' x='-309.355' y='2189.74' fileName=':/Standardised/BCH_restricted.csv'/>
<readCSV idx='841' x='-304.272' y='2952.93' fileName=':/Standardised/BCH_restricted.csv'/>
<readCSV idx='842' x='-293.333' y='3696.48' fileName=':/Standardised/BCH_restricted.csv'/>
<MultiJoin module='DefaultActions' idx='843' x='144.099' y='2348.3' nPinIn='5'>
  <Join pin='1' mainKey='Rounded Time' slaveKey='Rounded Time' prefix='2' copyAll='0'>
  <c>Abs (Autocorrelation)</c>
  </Join>
  <Join pin='2' mainKey='Rounded Time' slaveKey='Rounded Time' prefix='3' copyAll='0'>
  <c>Abs (Autocorrelation)</c>
  </Join>
  <Join pin='3' mainKey='Rounded Time' slaveKey='Rounded Time' prefix='4' copyAll='0'>
  <c>Abs (Autocorrelation)</c>
  </Join>
  <Join pin='4' mainKey='Rounded Time' slaveKey='Rounded Time' prefix='5' copyAll='0'>
  <c>Abs (Autocorrelation)</c>
  </Join>
</MultiJoin>
<MultiJoin module='DefaultActions' idx='844' x='100.28' y='3093.71' nPinIn='5'>
  <Join pin='1' mainKey='Rounded Time' slaveKey='Rounded Time' prefix='2' copyAll='0'>
  <c>Realized Volatility</c>
  </Join>
  <Join pin='2' mainKey='Rounded Time' slaveKey='Rounded Time' prefix='3' copyAll='0'>
  <c>Realized Volatility</c>
  </Join>
  <Join pin='3' mainKey='Rounded Time' slaveKey='Rounded Time' prefix='4' copyAll='0'>
  <c>Realized Volatility</c>
  </Join>
  <Join pin='4' mainKey='Rounded Time' slaveKey='Rounded Time' prefix='5' copyAll='0'>
  <c>Realized Volatility</c>
  </Join>
</MultiJoin>
<MultiJoin module='DefaultActions' idx='845' x='85.6226' y='1471.6' nPinIn='5'>
  <Join pin='1' mainKey='Rounded Time' slaveKey='Rounded Time' prefix='2' copyAll='0'>
  <c>Illiq</c>
  </Join>
  <Join pin='2' mainKey='Rounded Time' slaveKey='Rounded Time' prefix='3' copyAll='0'>
  <c>Illiq</c>
  </Join>
  <Join pin='3' mainKey='Rounded Time' slaveKey='Rounded Time' prefix='4' copyAll='0'>
  <c>Illiq</c>
  </Join>
  <Join pin='4' mainKey='Rounded Time' slaveKey='Rounded Time' prefix='5' copyAll='0'>
  <c>Illiq</c>
  </Join>
</MultiJoin>
<MultiJoin module='DefaultActions' idx='846' x='122.942' y='3865.4' nPinIn='5'>
  <Join pin='1' mainKey='Rounded Time' slaveKey='Rounded Time' prefix='2' copyAll='0'>
  <c>SD(Return 5min)</c>
  </Join>
  <Join pin='2' mainKey='Rounded Time' slaveKey='Rounded Time' prefix='3' copyAll='0'>
  <c>SD(Return 5min)</c>
  </Join>
  <Join pin='3' mainKey='Rounded Time' slaveKey='Rounded Time' prefix='4' copyAll='0'>
  <c>SD(Return 5min)</c>
  </Join>
  <Join pin='4' mainKey='Rounded Time' slaveKey='Rounded Time' prefix='5' copyAll='0'>
  <c>SD(Return 5min)</c>
  </Join>
</MultiJoin>
<FilterRows module='MathParser' idx='847' x='395.74' y='4089.18' dateFormat='yyyy-MM-dd hh:mm:ss'>
 <Expression>(dateTimeLE(rt, "2018-02-28 00:00:00")) &amp;&amp; (not(dateTimeLE(rt, "2018-01-28 00:00:00")))</Expression>
 <InputVars>
    <InputVar column='Rounded Time' label='rt' isNumber='0'/>
 </InputVars>
</FilterRows>
<FilterRows module='MathParser' idx='848' x='398.703' y='3992.85' dateFormat='yyyy-MM-dd hh:mm:ss'>
 <Expression>(dateTimeLE(rt, "2018-01-28 00:00:00")) &amp;&amp; (not(dateTimeLE(rt, "2017-12-28 00:00:00")))</Expression>
 <InputVars>
    <InputVar column='Rounded Time' label='rt' isNumber='0'/>
 </InputVars>
</FilterRows>
<FilterRows module='MathParser' idx='849' x='397.222' y='3895.05' dateFormat='yyyy-MM-dd hh:mm:ss'>
 <Expression>not(dateTimeLE(rt, "2018-04-21 00:00:00"))</Expression>
 <InputVars>
    <InputVar column='Rounded Time' label='rt' isNumber='0'/>
 </InputVars>
</FilterRows>
<FilterRows module='MathParser' idx='850' x='392.776' y='3794.28' dateFormat='yyyy-MM-dd hh:mm:ss'>
 <Expression>dateTimeLE(rt, "2017-11-12 00:00:00")</Expression>
 <InputVars>
    <InputVar column='Rounded Time' label='rt' isNumber='0'/>
 </InputVars>
</FilterRows>
<SelectColumns module='DefaultActions' idx='851' x='395.74' y='3697.96' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<FilterRows module='MathParser' idx='852' x='426.293' y='3336.74' dateFormat='yyyy-MM-dd hh:mm:ss'>
 <Expression>(dateTimeLE(rt, "2018-02-28 00:00:00")) &amp;&amp; (not(dateTimeLE(rt, "2018-01-28 00:00:00")))</Expression>
 <InputVars>
    <InputVar column='Rounded Time' label='rt' isNumber='0'/>
 </InputVars>
</FilterRows>
<FilterRows module='MathParser' idx='853' x='429.256' y='3243.38' dateFormat='yyyy-MM-dd hh:mm:ss'>
 <Expression>(dateTimeLE(rt, "2018-01-28 00:00:00")) &amp;&amp; (not(dateTimeLE(rt, "2017-12-28 00:00:00")))</Expression>
 <InputVars>
    <InputVar column='Rounded Time' label='rt' isNumber='0'/>
 </InputVars>
</FilterRows>
<FilterRows module='MathParser' idx='854' x='430.738' y='3145.58' dateFormat='yyyy-MM-dd hh:mm:ss'>
 <Expression>not(dateTimeLE(rt, "2018-04-21 00:00:00"))</Expression>
 <InputVars>
    <InputVar column='Rounded Time' label='rt' isNumber='0'/>
 </InputVars>
</FilterRows>
<FilterRows module='MathParser' idx='855' x='433.702' y='3038.88' dateFormat='yyyy-MM-dd hh:mm:ss'>
 <Expression>dateTimeLE(rt, "2017-11-12 00:00:00")</Expression>
 <InputVars>
    <InputVar column='Rounded Time' label='rt' isNumber='0'/>
 </InputVars>
</FilterRows>
<SelectColumns module='DefaultActions' idx='856' x='433.702' y='2948.49' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<FilterRows module='MathParser' idx='857' x='361.935' y='2567.62' dateFormat='yyyy-MM-dd hh:mm:ss'>
 <Expression>(dateTimeLE(rt, "2018-02-28 00:00:00")) &amp;&amp; (not(dateTimeLE(rt, "2018-01-28 00:00:00")))</Expression>
 <InputVars>
    <InputVar column='Rounded Time' label='rt' isNumber='0'/>
 </InputVars>
</FilterRows>
<FilterRows module='MathParser' idx='858' x='317.688' y='1702.69' dateFormat='yyyy-MM-dd hh:mm:ss'>
 <Expression>(dateTimeLE(rt, "2018-02-28 00:00:00")) &amp;&amp; (not(dateTimeLE(rt, "2018-01-28 00:00:00")))</Expression>
 <InputVars>
    <InputVar column='Rounded Time' label='rt' isNumber='0'/>
 </InputVars>
</FilterRows>
<FilterRows module='MathParser' idx='859' x='370.826' y='2469.82' dateFormat='yyyy-MM-dd hh:mm:ss'>
 <Expression>(dateTimeLE(rt, "2018-01-28 00:00:00")) &amp;&amp; (not(dateTimeLE(rt, "2017-12-28 00:00:00")))</Expression>
 <InputVars>
    <InputVar column='Rounded Time' label='rt' isNumber='0'/>
 </InputVars>
</FilterRows>
<FilterRows module='MathParser' idx='860' x='325.097' y='1606.37' dateFormat='yyyy-MM-dd hh:mm:ss'>
 <Expression>(dateTimeLE(rt, "2018-01-28 00:00:00")) &amp;&amp; (not(dateTimeLE(rt, "2017-12-28 00:00:00")))</Expression>
 <InputVars>
    <InputVar column='Rounded Time' label='rt' isNumber='0'/>
 </InputVars>
</FilterRows>
<FilterRows module='MathParser' idx='861' x='376.754' y='2372.01' dateFormat='yyyy-MM-dd hh:mm:ss'>
 <Expression>not(dateTimeLE(rt, "2018-04-21 00:00:00"))</Expression>
 <InputVars>
    <InputVar column='Rounded Time' label='rt' isNumber='0'/>
 </InputVars>
</FilterRows>
<FilterRows module='MathParser' idx='862' x='331.025' y='1514.49' dateFormat='yyyy-MM-dd hh:mm:ss'>
 <Expression>not(dateTimeLE(rt, "2018-04-21 00:00:00"))</Expression>
 <InputVars>
    <InputVar column='Rounded Time' label='rt' isNumber='0'/>
 </InputVars>
</FilterRows>
<FilterRows module='MathParser' idx='863' x='382.681' y='2274.21' dateFormat='yyyy-MM-dd hh:mm:ss'>
 <Expression>dateTimeLE(rt, "2017-11-12 00:00:00")</Expression>
 <InputVars>
    <InputVar column='Rounded Time' label='rt' isNumber='0'/>
 </InputVars>
</FilterRows>
<FilterRows module='MathParser' idx='864' x='329.543' y='1421.13' dateFormat='yyyy-MM-dd hh:mm:ss'>
 <Expression>dateTimeLE(rt, "2017-11-12 00:00:00")</Expression>
 <InputVars>
    <InputVar column='Rounded Time' label='rt' isNumber='0'/>
 </InputVars>
</FilterRows>
<SelectColumns module='DefaultActions' idx='865' x='379.718' y='2179.37' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<SelectColumns module='DefaultActions' idx='866' x='329.543' y='1320.37' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<SelectColumns module='DefaultActions' idx='867' x='542.445' y='4087.69' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<SelectColumns module='DefaultActions' idx='868' x='538' y='3997.3' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<SelectColumns module='DefaultActions' idx='869' x='543.927' y='3895.05' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<SelectColumns module='DefaultActions' idx='870' x='542.445' y='3798.73' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<Python idx='871' x='543.927' y='3703.89' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<SelectColumns module='DefaultActions' idx='872' x='575.962' y='3324.88' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<SelectColumns module='DefaultActions' idx='873' x='572.998' y='3234.49' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<SelectColumns module='DefaultActions' idx='874' x='577.444' y='3136.69' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<SelectColumns module='DefaultActions' idx='875' x='583.371' y='3043.33' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<Python idx='876' x='581.89' y='2944.04' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<SelectColumns module='DefaultActions' idx='877' x='513.689' y='2573.25' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<SelectColumns module='DefaultActions' idx='878' x='455.502' y='1702.69' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<SelectColumns module='DefaultActions' idx='879' x='521.978' y='2483.15' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<SelectColumns module='DefaultActions' idx='880' x='458.466' y='1612.29' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<SelectColumns module='DefaultActions' idx='881' x='521.978' y='2383.87' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<SelectColumns module='DefaultActions' idx='882' x='465.876' y='1510.05' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<SelectColumns module='DefaultActions' idx='883' x='527.905' y='2284.58' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<SelectColumns module='DefaultActions' idx='884' x='464.394' y='1415.21' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<Python idx='885' x='529.387' y='2183.82' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<Python idx='886' x='468.839' y='1317.4' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<Python idx='887' x='678.778' y='4096.59' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<Python idx='888' x='681.742' y='3997.3' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<Python idx='889' x='683.224' y='3898.01' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<Python idx='890' x='689.151' y='3801.69' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<Python idx='891' x='712.295' y='3339.7' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<Python idx='892' x='658.31' y='2572.07' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<Python idx='893' x='597.762' y='1721.95' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<Python idx='894' x='712.295' y='3240.42' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<Python idx='895' x='657.329' y='2474.26' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<Python idx='896' x='597.762' y='1619.7' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<Python idx='897' x='719.704' y='3145.58' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<Python idx='898' x='659.792' y='2374.98' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<Python idx='899' x='596.281' y='1521.9' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<Python idx='900' x='722.668' y='3049.26' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<Python idx='901' x='667.202' y='2275.69' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<Python idx='902' x='593.317' y='1416.69' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<FilterRows module='MathParser' idx='903' x='1641.02' y='-226.336' dateFormat='yyyy-MM-dd hh:mm:ss'>
 <Expression>dateTimeLE(rt, "2017-11-12 00:00:00")</Expression>
 <InputVars>
    <InputVar column='Rounded Time' label='rt' isNumber='0'/>
 </InputVars>
</FilterRows>
<FilterRows module='MathParser' idx='904' x='1645.46' y='-130.014' dateFormat='yyyy-MM-dd hh:mm:ss'>
 <Expression>not(dateTimeLE(rt, "2018-04-21 00:00:00"))</Expression>
 <InputVars>
    <InputVar column='Rounded Time' label='rt' isNumber='0'/>
 </InputVars>
</FilterRows>
<FilterRows module='MathParser' idx='905' x='1643.98' y='-32.2099' dateFormat='yyyy-MM-dd hh:mm:ss'>
 <Expression>(dateTimeLE(rt, "2018-01-28 00:00:00")) &amp;&amp; (not(dateTimeLE(rt, "2017-12-28 00:00:00")))</Expression>
 <InputVars>
    <InputVar column='Rounded Time' label='rt' isNumber='0'/>
 </InputVars>
</FilterRows>
<FilterRows module='MathParser' idx='906' x='1645.46' y='65.5939' dateFormat='yyyy-MM-dd hh:mm:ss'>
 <Expression>(dateTimeLE(rt, "2018-02-28 00:00:00")) &amp;&amp; (not(dateTimeLE(rt, "2018-01-28 00:00:00")))</Expression>
 <InputVars>
    <InputVar column='Rounded Time' label='rt' isNumber='0'/>
 </InputVars>
</FilterRows>
<FilterRows module='MathParser' idx='907' x='1797.15' y='832.153' dateFormat='yyyy-MM-dd hh:mm:ss'>
 <Expression>(dateTimeLE(rt, "2018-02-28 00:00:00")) &amp;&amp; (not(dateTimeLE(rt, "2018-01-28 00:00:00")))</Expression>
 <InputVars>
    <InputVar column='Rounded Time' label='rt' isNumber='0'/>
 </InputVars>
</FilterRows>
<FilterRows module='MathParser' idx='908' x='1836.94' y='3304.98' dateFormat='yyyy-MM-dd hh:mm:ss'>
 <Expression>(dateTimeLE(rt, "2018-02-28 00:00:00")) &amp;&amp; (not(dateTimeLE(rt, "2018-01-28 00:00:00")))</Expression>
 <InputVars>
    <InputVar column='Rounded Time' label='rt' isNumber='0'/>
 </InputVars>
</FilterRows>
<FilterRows module='MathParser' idx='909' x='1818.65' y='1751.08' dateFormat='yyyy-MM-dd hh:mm:ss'>
 <Expression>(dateTimeLE(rt, "2018-02-28 00:00:00")) &amp;&amp; (not(dateTimeLE(rt, "2018-01-28 00:00:00")))</Expression>
 <InputVars>
    <InputVar column='Rounded Time' label='rt' isNumber='0'/>
 </InputVars>
</FilterRows>
<FilterRows module='MathParser' idx='910' x='1801.58' y='2575.71' dateFormat='yyyy-MM-dd hh:mm:ss'>
 <Expression>(dateTimeLE(rt, "2018-02-28 00:00:00")) &amp;&amp; (not(dateTimeLE(rt, "2018-01-28 00:00:00")))</Expression>
 <InputVars>
    <InputVar column='Rounded Time' label='rt' isNumber='0'/>
 </InputVars>
</FilterRows>
<FilterRows module='MathParser' idx='911' x='1888.52' y='4121.92' dateFormat='yyyy-MM-dd hh:mm:ss'>
 <Expression>(dateTimeLE(rt, "2018-02-28 00:00:00")) &amp;&amp; (not(dateTimeLE(rt, "2018-01-28 00:00:00")))</Expression>
 <InputVars>
    <InputVar column='Rounded Time' label='rt' isNumber='0'/>
 </InputVars>
</FilterRows>
<FilterRows module='MathParser' idx='912' x='1797.36' y='740.085' dateFormat='yyyy-MM-dd hh:mm:ss'>
 <Expression>(dateTimeLE(rt, "2018-01-28 00:00:00")) &amp;&amp; (not(dateTimeLE(rt, "2017-12-28 00:00:00")))</Expression>
 <InputVars>
    <InputVar column='Rounded Time' label='rt' isNumber='0'/>
 </InputVars>
</FilterRows>
<FilterRows module='MathParser' idx='913' x='1803.23' y='641.786' dateFormat='yyyy-MM-dd hh:mm:ss'>
 <Expression>not(dateTimeLE(rt, "2018-04-21 00:00:00"))</Expression>
 <InputVars>
    <InputVar column='Rounded Time' label='rt' isNumber='0'/>
 </InputVars>
</FilterRows>
<FilterRows module='MathParser' idx='914' x='1803.23' y='542.019' dateFormat='yyyy-MM-dd hh:mm:ss'>
 <Expression>dateTimeLE(rt, "2017-11-12 00:00:00")</Expression>
 <InputVars>
    <InputVar column='Rounded Time' label='rt' isNumber='0'/>
 </InputVars>
</FilterRows>
<readCSV idx='915' x='1178.23' y='825.18' fileName=':/Standardised/ETH_standardised_15.csv'/>
<readCSV idx='916' x='1178.23' y='734.217' fileName=':/Standardised/XRP_standardised_15.csv'/>
<readCSV idx='918' x='1179.69' y='546.421' fileName=':/Standardised/BCH_standardised_15.csv'/>
<readCSV idx='919' x='1179.69' y='465.727' fileName=':/Standardised/BTC_standardised_15.csv'/>
<readCSV idx='920' x='1206.85' y='1334.41' fileName=':/Standardised/BTC_standardised_15.csv'/>
<readCSV idx='921' x='1203.92' y='1423.9' fileName=':/Standardised/BCH_standardised_15.csv'/>
<readCSV idx='922' x='1200.05' y='2199.38' fileName=':/Standardised/BTC_standardised_15.csv'/>
<readCSV idx='923' x='1229.2' y='2918.32' fileName=':/Standardised/BTC_standardised_15.csv'/>
<readCSV idx='924' x='1273.78' y='3749.27' fileName=':/Standardised/BTC_standardised_15.csv'/>
<readCSV idx='925' x='1202.98' y='2287.41' fileName=':/Standardised/BCH_standardised_15.csv'/>
<readCSV idx='926' x='1233.6' y='3015.16' fileName=':/Standardised/BCH_standardised_15.csv'/>
<readCSV idx='927' x='1272.31' y='3838.76' fileName=':/Standardised/BCH_standardised_15.csv'/>
<readCSV idx='932' x='1205.38' y='1607.3' fileName=':/Standardised/XRP_standardised_15.csv'/>
<readCSV idx='933' x='1202.98' y='2473.74' fileName=':/Standardised/XRP_standardised_15.csv'/>
<readCSV idx='934' x='1240.94' y='3197.08' fileName=':/Standardised/XRP_standardised_15.csv'/>
<readCSV idx='935' x='1285.52' y='4026.56' fileName=':/Standardised/XRP_standardised_15.csv'/>
<readCSV idx='936' x='1208.32' y='1701.19' fileName=':/Standardised/ETH_standardised_15.csv'/>
<readCSV idx='937' x='1208.85' y='2564.7' fileName=':/Standardised/ETH_standardised_15.csv'/>
<readCSV idx='938' x='1242.4' y='3285.11' fileName=':/Standardised/ETH_standardised_15.csv'/>
<readCSV idx='939' x='1285.52' y='4116.05' fileName=':/Standardised/ETH_standardised_15.csv'/>
<SelectColumns module='DefaultActions' idx='940' x='1349.82' y='465.705' keep='1'>
 <c>Rounded Time</c>
 <c>PPI (standardised)</c>
</SelectColumns>
<MultiJoin module='DefaultActions' idx='941' x='1568.49' y='609.002' nPinIn='5'>
  <Join pin='1' mainKey='Rounded Time' slaveKey='Rounded Time' prefix='2' copyAll='0'>
  <c>PPI (standardised)</c>
  </Join>
  <Join pin='2' mainKey='Rounded Time' slaveKey='Rounded Time' prefix='3' copyAll='0'>
  <c>PPI (standardised)</c>
  </Join>
  <Join pin='3' mainKey='Rounded Time' slaveKey='Rounded Time' prefix='4' copyAll='0'>
  <c>PPI (standardised)</c>
  </Join>
  <Join pin='4' mainKey='Rounded Time' slaveKey='Rounded Time' prefix='5' copyAll='0'>
  <c>PPI (standardised)</c>
  </Join>
</MultiJoin>
<SelectColumns module='DefaultActions' idx='942' x='1365.3' y='1341.74' keep='1'>
 <c>Rounded Time</c>
 <c>Amihud (standardised)</c>
</SelectColumns>
<SelectColumns module='DefaultActions' idx='943' x='1348.24' y='2194.98' keep='1'>
 <c>Rounded Time</c>
 <c>Return Autocorrelation (standardised)</c>
</SelectColumns>
<SelectColumns module='DefaultActions' idx='944' x='1411.12' y='2912.46' keep='1'>
 <c>Rounded Time</c>
 <c>Realized Volatility (standardised)</c>
</SelectColumns>
<SelectColumns module='DefaultActions' idx='945' x='1431.49' y='3746.73' keep='1'>
 <c>Rounded Time</c>
 <c>Quote Return (standardised)</c>
</SelectColumns>
<MultiJoin module='DefaultActions' idx='947' x='1582.44' y='1461.57' nPinIn='5'>
  <Join pin='1' mainKey='Rounded Time' slaveKey='Rounded Time' prefix='2' copyAll='0'>
  <c>Amihud (standardised)</c>
  </Join>
  <Join pin='2' mainKey='Rounded Time' slaveKey='Rounded Time' prefix='3' copyAll='0'>
  <c>Amihud (standardised)</c>
  </Join>
  <Join pin='3' mainKey='Rounded Time' slaveKey='Rounded Time' prefix='4' copyAll='0'>
  <c>Amihud (standardised)</c>
  </Join>
  <Join pin='4' mainKey='Rounded Time' slaveKey='Rounded Time' prefix='5' copyAll='0'>
  <c>Amihud (standardised)</c>
  </Join>
</MultiJoin>
<MultiJoin module='DefaultActions' idx='948' x='1626.74' y='2349.99' nPinIn='6'>
  <Join pin='1' mainKey='Rounded Time' slaveKey='Rounded Time' prefix='2' copyAll='0'>
  <c>Return Autocorrelation (standardised)</c>
  </Join>
  <Join pin='2' mainKey='Rounded Time' slaveKey='Rounded Time' prefix='3' copyAll='0'>
  <c>Return Autocorrelation (standardised)</c>
  </Join>
  <Join pin='3' mainKey='Rounded Time' slaveKey='Rounded Time' prefix='4' copyAll='0'>
  <c>Return Autocorrelation (standardised)</c>
  </Join>
  <Join pin='4' mainKey='Rounded Time' slaveKey='Rounded Time' prefix='5' copyAll='0'>
  <c>Return Autocorrelation (standardised)</c>
  </Join>
</MultiJoin>
<MultiJoin module='DefaultActions' idx='949' x='1595.98' y='3092.91' nPinIn='5'>
  <Join pin='1' mainKey='Rounded Time' slaveKey='Rounded Time' prefix='2' copyAll='0'>
  <c>Realized Volatility (standardised)</c>
  </Join>
  <Join pin='2' mainKey='Rounded Time' slaveKey='Rounded Time' prefix='3' copyAll='0'>
  <c>Realized Volatility (standardised)</c>
  </Join>
  <Join pin='3' mainKey='Rounded Time' slaveKey='Rounded Time' prefix='4' copyAll='0'>
  <c>Realized Volatility (standardised)</c>
  </Join>
  <Join pin='4' mainKey='Rounded Time' slaveKey='Rounded Time' prefix='5' copyAll='0'>
  <c>Realized Volatility (standardised)</c>
  </Join>
</MultiJoin>
<MultiJoin module='DefaultActions' idx='950' x='1655.25' y='3932.66' nPinIn='5'>
  <Join pin='1' mainKey='Rounded Time' slaveKey='Rounded Time' prefix='2' copyAll='0'>
  <c>Quote Return (standardised)</c>
  </Join>
  <Join pin='2' mainKey='Rounded Time' slaveKey='Rounded Time' prefix='3' copyAll='0'>
  <c>Quote Return (standardised)</c>
  </Join>
  <Join pin='3' mainKey='Rounded Time' slaveKey='Rounded Time' prefix='4' copyAll='0'>
  <c>Quote Return (standardised)</c>
  </Join>
  <Join pin='4' mainKey='Rounded Time' slaveKey='Rounded Time' prefix='5' copyAll='0'>
  <c>Quote Return (standardised)</c>
  </Join>
</MultiJoin>
<FilterRows module='MathParser' idx='956' x='1823.05' y='1564.75' dateFormat='yyyy-MM-dd hh:mm:ss'>
 <Expression>not(dateTimeLE(rt, "2018-04-21 00:00:00"))</Expression>
 <InputVars>
    <InputVar column='Rounded Time' label='rt' isNumber='0'/>
 </InputVars>
</FilterRows>
<FilterRows module='MathParser' idx='957' x='1823.59' y='2384.24' dateFormat='yyyy-MM-dd hh:mm:ss'>
 <Expression>not(dateTimeLE(rt, "2018-04-21 00:00:00"))</Expression>
 <InputVars>
    <InputVar column='Rounded Time' label='rt' isNumber='0'/>
 </InputVars>
</FilterRows>
<FilterRows module='MathParser' idx='958' x='1842.46' y='3114.92' dateFormat='yyyy-MM-dd hh:mm:ss'>
 <Expression>not(dateTimeLE(rt, "2018-04-21 00:00:00"))</Expression>
 <InputVars>
    <InputVar column='Rounded Time' label='rt' isNumber='0'/>
 </InputVars>
</FilterRows>
<FilterRows module='MathParser' idx='959' x='1879.72' y='3941.46' dateFormat='yyyy-MM-dd hh:mm:ss'>
 <Expression>not(dateTimeLE(rt, "2018-04-21 00:00:00"))</Expression>
 <InputVars>
    <InputVar column='Rounded Time' label='rt' isNumber='0'/>
 </InputVars>
</FilterRows>
<FilterRows module='MathParser' idx='960' x='1821.59' y='1463.52' dateFormat='yyyy-MM-dd hh:mm:ss'>
 <Expression>dateTimeLE(rt, "2017-11-12 00:00:00")</Expression>
 <InputVars>
    <InputVar column='Rounded Time' label='rt' isNumber='0'/>
 </InputVars>
</FilterRows>
<FilterRows module='MathParser' idx='961' x='1820.66' y='2281.54' dateFormat='yyyy-MM-dd hh:mm:ss'>
 <Expression>dateTimeLE(rt, "2017-11-12 00:00:00")</Expression>
 <InputVars>
    <InputVar column='Rounded Time' label='rt' isNumber='0'/>
 </InputVars>
</FilterRows>
<FilterRows module='MathParser' idx='962' x='1842.7' y='3022.55' dateFormat='yyyy-MM-dd hh:mm:ss'>
 <Expression>dateTimeLE(rt, "2017-11-12 00:00:00")</Expression>
 <InputVars>
    <InputVar column='Rounded Time' label='rt' isNumber='0'/>
 </InputVars>
</FilterRows>
<FilterRows module='MathParser' idx='963' x='1891.46' y='3840.23' dateFormat='yyyy-MM-dd hh:mm:ss'>
 <Expression>dateTimeLE(rt, "2017-11-12 00:00:00")</Expression>
 <InputVars>
    <InputVar column='Rounded Time' label='rt' isNumber='0'/>
 </InputVars>
</FilterRows>
<SelectColumns module='DefaultActions' idx='964' x='1800.3' y='446.654' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<SelectColumns module='DefaultActions' idx='965' x='1827.45' y='1365.22' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<SelectColumns module='DefaultActions' idx='966' x='1832.4' y='2187.64' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<SelectColumns module='DefaultActions' idx='967' x='1842.46' y='2925.66' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<SelectColumns module='DefaultActions' idx='968' x='1888.52' y='3746.33' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<Python idx='969' x='1776.08' y='-318.452' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<SelectColumns module='DefaultActions' idx='970' x='1774.61' y='-224.555' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<SelectColumns module='DefaultActions' idx='971' x='1774.61' y='-135.058' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<SelectColumns module='DefaultActions' idx='972' x='1773.14' y='-44.0944' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<SelectColumns module='DefaultActions' idx='973' x='1764.98' y='46.72' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<Python idx='975' x='1904.25' y='-42.7417' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<Python idx='977' x='1906.72' y='-226.489' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<SelectColumns module='DefaultActions' idx='978' x='1936.74' y='833.983' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<SelectColumns module='DefaultActions' idx='979' x='1939.68' y='741.552' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<SelectColumns module='DefaultActions' idx='980' x='1933.81' y='646.187' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<SelectColumns module='DefaultActions' idx='981' x='1935.28' y='550.822' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<Python idx='982' x='1933.81' y='449.589' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<Python idx='983' x='1963.9' y='1365.22' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<Python idx='984' x='1983.31' y='2933' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<Python idx='985' x='1976.18' y='2192.05' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<Python idx='986' x='2020.57' y='3741.93' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<SelectColumns module='DefaultActions' idx='987' x='1965.37' y='1467.92' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<SelectColumns module='DefaultActions' idx='988' x='1983.51' y='2297.68' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<SelectColumns module='DefaultActions' idx='989' x='1984.78' y='3038.63' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<SelectColumns module='DefaultActions' idx='990' x='2027.9' y='3841.7' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<SelectColumns module='DefaultActions' idx='991' x='1965.37' y='1564.75' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<SelectColumns module='DefaultActions' idx='992' x='1976.18' y='2398.91' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<SelectColumns module='DefaultActions' idx='993' x='1981.84' y='3136.93' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<SelectColumns module='DefaultActions' idx='994' x='2023.5' y='3938.53' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<SelectColumns module='DefaultActions' idx='995' x='1968.3' y='1658.65' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<SelectColumns module='DefaultActions' idx='996' x='1980.58' y='2491.35' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<SelectColumns module='DefaultActions' idx='997' x='1989.18' y='3229.36' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<SelectColumns module='DefaultActions' idx='998' x='2030.84' y='4033.89' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<SelectColumns module='DefaultActions' idx='999' x='1975.64' y='1752.54' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<SelectColumns module='DefaultActions' idx='1000' x='1968.83' y='2585.98' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<SelectColumns module='DefaultActions' idx='1001' x='1987.71' y='3317.39' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<SelectColumns module='DefaultActions' idx='1002' x='2030.84' y='4120.46' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<Python idx='1003' x='2074.66' y='555.224' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<Python idx='1004' x='2074.66' y='644.72' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<Python idx='1005' x='2109.15' y='1466.45' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<Python idx='1006' x='2127.3' y='2294.75' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<Python idx='1007' x='2121.22' y='3037.16' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<Python idx='1008' x='2176.09' y='3838.76' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<Python idx='1009' x='2109.15' y='1557.41' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<Python idx='1010' x='2128.76' y='2384.24' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<Python idx='1011' x='2127.09' y='3132.53' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<Python idx='1012' x='2179.02' y='3926.79' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<Python idx='1013' x='2070.25' y='740.085' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<Python idx='1014' x='2106.21' y='1657.18' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<Python idx='1015' x='2124.36' y='2473.74' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<Python idx='1016' x='2128.56' y='3222.02' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<Python idx='1017' x='2180.49' y='4025.09' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<Python idx='1018' x='2064.39' y='832.516' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<Python idx='1019' x='2103.28' y='1751.08' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<Python idx='1020' x='2109.68' y='2575.71' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<Python idx='1021' x='2128.56' y='3317.39' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<Python idx='1022' x='2184.89' y='4120.46' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<readCSV idx='1023' x='1173.83' y='637.384' fileName=':/Standardised/EOS_standardised_15.csv'/>
<readCSV idx='1024' x='1206.85' y='1510.46' fileName=':/Standardised/EOS_standardised_15.csv'/>
<readCSV idx='1025' x='1201.52' y='2373.97' fileName=':/Standardised/EOS_standardised_15.csv'/>
<readCSV idx='1026' x='1238' y='3109.05' fileName=':/Standardised/EOS_standardised_15.csv'/>
<readCSV idx='1027' x='1276.56' y='3931.86' fileName=':/Standardised/EOS_standardised_15.csv'/>
<FilterRows module='MathParser' idx='1028' x='1887.01' y='4029.54' dateFormat='yyyy-MM-dd hh:mm:ss'>
 <Expression>(dateTimeLE(rt, "2018-01-28 00:00:00")) &amp;&amp; (not(dateTimeLE(rt, "2017-12-28 00:00:00")))</Expression>
 <InputVars>
    <InputVar column='Rounded Time' label='rt' isNumber='0'/>
 </InputVars>
</FilterRows>
<FilterRows module='MathParser' idx='1029' x='1820.28' y='1655.03' dateFormat='yyyy-MM-dd hh:mm:ss'>
 <Expression>(dateTimeLE(rt, "2018-01-28 00:00:00")) &amp;&amp; (not(dateTimeLE(rt, "2017-12-28 00:00:00")))</Expression>
 <InputVars>
    <InputVar column='Rounded Time' label='rt' isNumber='0'/>
 </InputVars>
</FilterRows>
<FilterRows module='MathParser' idx='1030' x='1812.85' y='2475.95' dateFormat='yyyy-MM-dd hh:mm:ss'>
 <Expression>(dateTimeLE(rt, "2018-01-28 00:00:00")) &amp;&amp; (not(dateTimeLE(rt, "2017-12-28 00:00:00")))</Expression>
 <InputVars>
    <InputVar column='Rounded Time' label='rt' isNumber='0'/>
 </InputVars>
</FilterRows>
<FilterRows module='MathParser' idx='1031' x='1831.72' y='3212.6' dateFormat='yyyy-MM-dd hh:mm:ss'>
 <Expression>(dateTimeLE(rt, "2018-01-28 00:00:00")) &amp;&amp; (not(dateTimeLE(rt, "2017-12-28 00:00:00")))</Expression>
 <InputVars>
    <InputVar column='Rounded Time' label='rt' isNumber='0'/>
 </InputVars>
</FilterRows>
<ChangeDataType idx='1034' x='2222.76' y='445.157' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<Calculator module='MathParser' idx='1036' x='2066.51' y='449.318'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<Calculator module='MathParser' idx='1037' x='1903.32' y='-317.15'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<ChangeDataType idx='1038' x='2035.8' y='-313.709' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<Calculator module='MathParser' idx='1039' x='2105.64' y='1366.51'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<ChangeDataType idx='1040' x='2236.4' y='1364.79' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<Calculator module='MathParser' idx='1041' x='2115.44' y='2192.31'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<ChangeDataType idx='1042' x='2246.2' y='2185.43' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<Calculator module='MathParser' idx='1043' x='2120.55' y='2933.56'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<ChangeDataType idx='1044' x='2256.47' y='2932.02' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<Calculator module='MathParser' idx='1045' x='2165.85' y='3744.16'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<ChangeDataType idx='1046' x='2301.77' y='3744.16' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<Calculator module='MathParser' idx='1047' x='523.036' y='-347.78'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<ChangeDataType idx='1048' x='652.075' y='-344.339' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<Calculator module='MathParser' idx='1049' x='557.594' y='438.836'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<ChangeDataType idx='1050' x='682.3' y='437.659' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<Calculator module='MathParser' idx='1051' x='598.349' y='1320.57'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<ChangeDataType idx='1052' x='718.349' y='1319.4' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<Calculator module='MathParser' idx='1053' x='658.015' y='2176.07'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<ChangeDataType idx='1054' x='787.427' y='2177.25' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<Calculator module='MathParser' idx='1055' x='725.496' y='2941.98'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<ChangeDataType idx='1056' x='847.849' y='2940.8' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<Calculator module='MathParser' idx='1057' x='682.668' y='3703.37'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<ChangeDataType idx='1058' x='797.962' y='3703.37' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<Calculator module='MathParser' idx='1059' x='645.882' y='-248.118'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<Calculator module='MathParser' idx='1060' x='643.529' y='-162.235'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<Calculator module='MathParser' idx='1061' x='648.235' y='-74'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<Calculator module='MathParser' idx='1062' x='647.059' y='27.1765'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<ChangeDataType idx='1063' x='775.294' y='-246.941' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<ChangeDataType idx='1064' x='776.471' y='-157.529' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<ChangeDataType idx='1065' x='775.294' y='-68.1176' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<ChangeDataType idx='1066' x='775.294' y='27.1765' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<Calculator module='MathParser' idx='1067' x='2030.13' y='-225.853'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<ChangeDataType idx='1068' x='2152.48' y='-224.676' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<Calculator module='MathParser' idx='1069' x='2033.66' y='-134.088'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<Calculator module='MathParser' idx='1070' x='2031.14' y='-50.7477'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<Calculator module='MathParser' idx='1071' x='2034.83' y='52.9713'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<ChangeDataType idx='1072' x='2158.36' y='-135.264' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<ChangeDataType idx='1073' x='2166.6' y='-45.8522' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<ChangeDataType idx='1074' x='2169.35' y='47.4932' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<Calculator module='MathParser' idx='1075' x='2199.07' y='555.517'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<ChangeDataType idx='1076' x='2323.77' y='551.988' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<Calculator module='MathParser' idx='1077' x='2199.07' y='647.282'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<Calculator module='MathParser' idx='1078' x='2207.3' y='739.047'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<Calculator module='MathParser' idx='1079' x='2208.48' y='833.164'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<ChangeDataType idx='1080' x='2326.12' y='648.458' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<ChangeDataType idx='1081' x='2329.65' y='742.576' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<ChangeDataType idx='1082' x='2333.18' y='833.164' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<Calculator module='MathParser' idx='1083' x='2232.99' y='1466.86'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<ChangeDataType idx='1084' x='2358.87' y='1466.86' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<Calculator module='MathParser' idx='1085' x='2230.64' y='1557.44'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<Calculator module='MathParser' idx='1086' x='2237.7' y='1652.74'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<Calculator module='MathParser' idx='1087' x='2225.93' y='1746.86'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<ChangeDataType idx='1088' x='2361.23' y='1553.01' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<ChangeDataType idx='1089' x='2363.58' y='1648.03' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<ChangeDataType idx='1090' x='2363.58' y='1740.8' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<Calculator module='MathParser' idx='1091' x='2249.67' y='2298.82'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<ChangeDataType idx='1092' x='2370.85' y='2293.21' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<Calculator module='MathParser' idx='1093' x='2253.2' y='2390.59'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<Calculator module='MathParser' idx='1094' x='2248.49' y='2481.18'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<Calculator module='MathParser' idx='1095' x='2242.05' y='2577.79'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<ChangeDataType idx='1096' x='2375.55' y='2391.77' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<ChangeDataType idx='1097' x='2381.44' y='2485.88' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<ChangeDataType idx='1098' x='2375.55' y='2570.59' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<Calculator module='MathParser' idx='1099' x='785.074' y='2277.25'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<ChangeDataType idx='1100' x='900.368' y='2276.07' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<ChangeDataType idx='1101' x='902.721' y='2365.48' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<ChangeDataType idx='1102' x='907.427' y='2454.9' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<Calculator module='MathParser' idx='1103' x='776.839' y='2373.72'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<Calculator module='MathParser' idx='1104' x='779.192' y='2466.66'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<Calculator module='MathParser' idx='1105' x='776.839' y='2570.19'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<ChangeDataType idx='1106' x='903.612' y='2573.6' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<Calculator module='MathParser' idx='1107' x='728.937' y='1415.87'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<ChangeDataType idx='1108' x='854.82' y='1417.04' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<Calculator module='MathParser' idx='1109' x='730.114' y='1517.04'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<Calculator module='MathParser' idx='1110' x='732.467' y='1619.4'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<Calculator module='MathParser' idx='1111' x='731.29' y='1719.4'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<ChangeDataType idx='1112' x='861.878' y='1515.87' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<ChangeDataType idx='1113' x='861.878' y='1613.52' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<ChangeDataType idx='1114' x='859.525' y='1718.22' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<Calculator module='MathParser' idx='1115' x='695.241' y='551.777'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<Calculator module='MathParser' idx='1116' x='692.888' y='647.071'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<Calculator module='MathParser' idx='1117' x='694.065' y='748.247'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<Calculator module='MathParser' idx='1118' x='696.418' y='832.953'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<Calculator module='MathParser' idx='1119' x='836.084' y='3051.39'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<ChangeDataType idx='1120' x='960.79' y='3050.21' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<Calculator module='MathParser' idx='1121' x='831.378' y='3143.15'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<Calculator module='MathParser' idx='1122' x='832.554' y='3241.98'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<Calculator module='MathParser' idx='1123' x='832.554' y='3338.45'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<ChangeDataType idx='1124' x='954.907' y='3139.62' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<ChangeDataType idx='1125' x='952.554' y='3240.8' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<ChangeDataType idx='1126' x='960.79' y='3337.27' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<Calculator module='MathParser' idx='1127' x='812.08' y='3802.2'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<Calculator module='MathParser' idx='1128' x='808.551' y='3901.02'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<Calculator module='MathParser' idx='1129' x='808.551' y='3993.96'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<Calculator module='MathParser' idx='1130' x='807.374' y='4086.9'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<ChangeDataType idx='1131' x='929.727' y='3801.02' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<ChangeDataType idx='1132' x='933.256' y='3898.67' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<ChangeDataType idx='1133' x='932.08' y='3988.08' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<ChangeDataType idx='1134' x='933.256' y='4082.2' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<ChangeDataType idx='1135' x='818.359' y='553.718' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<ChangeDataType idx='1136' x='820.359' y='645.718' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<ChangeDataType idx='1137' x='818.359' y='740.718' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<ChangeDataType idx='1138' x='818.359' y='830.718' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<Calculator module='MathParser' idx='1139' x='2254.09' y='3035.58'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<Calculator module='MathParser' idx='1140' x='2257.78' y='3127.93'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<Calculator module='MathParser' idx='1141' x='2255.32' y='3227.66'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<Calculator module='MathParser' idx='1142' x='2259.01' y='3317.54'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<ChangeDataType idx='1143' x='2384.6' y='3036.81' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<ChangeDataType idx='1144' x='2388.3' y='3126.7' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<ChangeDataType idx='1145' x='2390.76' y='3214.11' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<ChangeDataType idx='1146' x='2399.38' y='3309.35' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<Calculator module='MathParser' idx='1147' x='2305.78' y='3839.8'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<Calculator module='MathParser' idx='1148' x='2308.24' y='3924.75'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<Calculator module='MathParser' idx='1149' x='2304.55' y='4022.02'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<Calculator module='MathParser' idx='1150' x='2307.01' y='4116.83'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<ChangeDataType idx='1151' x='2432.6' y='3836.1' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<ChangeDataType idx='1152' x='2433.83' y='3932.14' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<ChangeDataType idx='1153' x='2435.06' y='4019.99' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<ChangeDataType idx='1154' x='2441.22' y='4114.37' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<FilterRows module='MathParser' idx='1157' x='1648.28' y='157.47' dateFormat='yyyy-MM-dd hh:mm:ss'>
 <Expression>(dateTimeLE(rt, "2017-12-10 00:00:00")) &amp;&amp; (not(dateTimeLE(rt, "2017-09-09 00:00:00")))</Expression>
 <InputVars>
    <InputVar column='Rounded Time' label='rt' isNumber='0'/>
 </InputVars>
</FilterRows>
<FilterRows module='MathParser' idx='1158' x='1646.58' y='246.086' dateFormat='yyyy-MM-dd hh:mm:ss'>
 <Expression>(dateTimeLE(rt, "2018-03-11 00:00:00")) &amp;&amp; (not(dateTimeLE(rt, "2017-12-10 00:00:00")))</Expression>
 <InputVars>
    <InputVar column='Rounded Time' label='rt' isNumber='0'/>
 </InputVars>
</FilterRows>
<FilterRows module='MathParser' idx='1160' x='1804.67' y='927.622' dateFormat='yyyy-MM-dd hh:mm:ss'>
 <Expression>(dateTimeLE(rt, "2017-12-10 00:00:00")) &amp;&amp; (not(dateTimeLE(rt, "2017-09-09 00:00:00")))</Expression>
 <InputVars>
    <InputVar column='Rounded Time' label='rt' isNumber='0'/>
 </InputVars>
</FilterRows>
<FilterRows module='MathParser' idx='1161' x='1795.36' y='1045.86' dateFormat='yyyy-MM-dd hh:mm:ss'>
 <Expression>(dateTimeLE(rt, "2018-03-11 00:00:00")) &amp;&amp; (not(dateTimeLE(rt, "2017-12-10 00:00:00")))</Expression>
 <InputVars>
    <InputVar column='Rounded Time' label='rt' isNumber='0'/>
 </InputVars>
</FilterRows>
<FilterRows module='MathParser' idx='1162' x='1830.36' y='1839.04' dateFormat='yyyy-MM-dd hh:mm:ss'>
 <Expression>(dateTimeLE(rt, "2017-12-10 00:00:00")) &amp;&amp; (not(dateTimeLE(rt, "2017-09-09 00:00:00")))</Expression>
 <InputVars>
    <InputVar column='Rounded Time' label='rt' isNumber='0'/>
 </InputVars>
</FilterRows>
<FilterRows module='MathParser' idx='1163' x='1803.38' y='2666.58' dateFormat='yyyy-MM-dd hh:mm:ss'>
 <Expression>(dateTimeLE(rt, "2017-12-10 00:00:00")) &amp;&amp; (not(dateTimeLE(rt, "2017-09-09 00:00:00")))</Expression>
 <InputVars>
    <InputVar column='Rounded Time' label='rt' isNumber='0'/>
 </InputVars>
</FilterRows>
<FilterRows module='MathParser' idx='1164' x='1830.12' y='3403.29' dateFormat='yyyy-MM-dd hh:mm:ss'>
 <Expression>(dateTimeLE(rt, "2017-12-10 00:00:00")) &amp;&amp; (not(dateTimeLE(rt, "2017-09-09 00:00:00")))</Expression>
 <InputVars>
    <InputVar column='Rounded Time' label='rt' isNumber='0'/>
 </InputVars>
</FilterRows>
<FilterRows module='MathParser' idx='1165' x='1837.17' y='1931.07' dateFormat='yyyy-MM-dd hh:mm:ss'>
 <Expression>(dateTimeLE(rt, "2018-03-11 00:00:00")) &amp;&amp; (not(dateTimeLE(rt, "2017-12-10 00:00:00")))</Expression>
 <InputVars>
    <InputVar column='Rounded Time' label='rt' isNumber='0'/>
 </InputVars>
</FilterRows>
<FilterRows module='MathParser' idx='1166' x='1768.12' y='2312.58' dateFormat='yyyy-MM-dd hh:mm:ss'>
 <Expression>(dateTimeLE(rt, "2018-03-11 00:00:00")) &amp;&amp; (not(dateTimeLE(rt, "2017-12-10 00:00:00")))</Expression>
 <InputVars>
    <InputVar column='Rounded Time' label='rt' isNumber='0'/>
 </InputVars>
</FilterRows>
<FilterRows module='MathParser' idx='1167' x='1838.65' y='3493.61' dateFormat='yyyy-MM-dd hh:mm:ss'>
 <Expression>(dateTimeLE(rt, "2018-03-11 00:00:00")) &amp;&amp; (not(dateTimeLE(rt, "2017-12-10 00:00:00")))</Expression>
 <InputVars>
    <InputVar column='Rounded Time' label='rt' isNumber='0'/>
 </InputVars>
</FilterRows>
<FilterRows module='MathParser' idx='1168' x='1885.69' y='4214.45' dateFormat='yyyy-MM-dd hh:mm:ss'>
 <Expression>(dateTimeLE(rt, "2017-12-10 00:00:00")) &amp;&amp; (not(dateTimeLE(rt, "2017-09-09 00:00:00")))</Expression>
 <InputVars>
    <InputVar column='Rounded Time' label='rt' isNumber='0'/>
 </InputVars>
</FilterRows>
<FilterRows module='MathParser' idx='1169' x='1883.98' y='4301.36' dateFormat='yyyy-MM-dd hh:mm:ss'>
 <Expression>(dateTimeLE(rt, "2018-03-11 00:00:00")) &amp;&amp; (not(dateTimeLE(rt, "2017-12-10 00:00:00")))</Expression>
 <InputVars>
    <InputVar column='Rounded Time' label='rt' isNumber='0'/>
 </InputVars>
</FilterRows>
<FilterRows module='MathParser' idx='1170' x='260.736' y='127.445' dateFormat='yyyy-MM-dd hh:mm:ss'>
 <Expression>(dateTimeLE(rt, "2017-12-10 00:00:00")) &amp;&amp; (not(dateTimeLE(rt, "2017-09-09 00:00:00")))</Expression>
 <InputVars>
    <InputVar column='Rounded Time' label='rt' isNumber='0'/>
 </InputVars>
</FilterRows>
<FilterRows module='MathParser' idx='1171' x='259.032' y='219.47' dateFormat='yyyy-MM-dd hh:mm:ss'>
 <Expression>(dateTimeLE(rt, "2018-03-11 00:00:00")) &amp;&amp; (not(dateTimeLE(rt, "2017-12-10 00:00:00")))</Expression>
 <InputVars>
    <InputVar column='Rounded Time' label='rt' isNumber='0'/>
 </InputVars>
</FilterRows>
<SelectColumns module='DefaultActions' idx='1172' x='1769.28' y='148.949' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<SelectColumns module='DefaultActions' idx='1173' x='1770.98' y='242.678' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<Python idx='1174' x='1900.5' y='147.245' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<Python idx='1175' x='1900.5' y='237.565' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<Calculator module='MathParser' idx='1176' x='2040.24' y='143.837'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<Calculator module='MathParser' idx='1177' x='2038.53' y='234.157'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<ChangeDataType idx='1178' x='2173.16' y='147.245' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<ChangeDataType idx='1179' x='2173.16' y='239.269' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<SelectColumns module='DefaultActions' idx='1180' x='1929.07' y='922.51' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<SelectColumns module='DefaultActions' idx='1181' x='1918.06' y='1042.45' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<Python idx='1183' x='2058.59' y='925.918' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<Python idx='1184' x='2050.98' y='1042.45' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<Calculator module='MathParser' idx='1185' x='2191.51' y='931.031'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<Calculator module='MathParser' idx='1186' x='2178.55' y='1047.32'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<ChangeDataType idx='1187' x='2322.73' y='931.031' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<ChangeDataType idx='1188' x='2315.13' y='1061.2' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<SelectColumns module='DefaultActions' idx='1189' x='1975.21' y='1842.45' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<SelectColumns module='DefaultActions' idx='1190' x='1970.1' y='1937.88' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<Python idx='1191' x='2108.13' y='1844.15' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<Python idx='1192' x='2106.43' y='1934.47' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<Calculator module='MathParser' idx='1193' x='2237.65' y='1837.34'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<Calculator module='MathParser' idx='1194' x='2235.95' y='1929.36'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<ChangeDataType idx='1195' x='2370.57' y='1833.93' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<ChangeDataType idx='1196' x='2367.17' y='1932.77' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<SelectColumns module='DefaultActions' idx='1197' x='1965.28' y='2678.51' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<SelectColumns module='DefaultActions' idx='1198' x='1928.31' y='2314.29' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<Python idx='1199' x='2110.13' y='2673.4' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<Python idx='1200' x='2068.06' y='2310.88' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<Calculator module='MathParser' idx='1201' x='2244.76' y='2669.99'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<Calculator module='MathParser' idx='1202' x='2211.2' y='2309.18'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<ChangeDataType idx='1203' x='2372.57' y='2668.29' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<ChangeDataType idx='1204' x='2328.79' y='2305.77' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<SelectColumns module='DefaultActions' idx='1205' x='1981.79' y='3404.99' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<SelectColumns module='DefaultActions' idx='1206' x='1980.09' y='3493.61' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<Python idx='1207' x='2130.06' y='3403.29' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<Python idx='1208' x='2118.13' y='3488.5' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<Calculator module='MathParser' idx='1209' x='2257.87' y='3404.99'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<Calculator module='MathParser' idx='1210' x='2251.05' y='3486.79'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<ChangeDataType idx='1211' x='2394.2' y='3404.99' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<ChangeDataType idx='1212' x='2394.2' y='3497.02' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<SelectColumns module='DefaultActions' idx='1213' x='2028.84' y='4204.22' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<SelectColumns module='DefaultActions' idx='1214' x='2028.84' y='4294.54' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<Python idx='1215' x='2180.51' y='4207.63' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<Python idx='1216' x='2178.8' y='4289.43' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<Calculator module='MathParser' idx='1217' x='2308.32' y='4209.33'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<Calculator module='MathParser' idx='1218' x='2304.91' y='4294.54'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<ChangeDataType idx='1219' x='2441.24' y='4205.93' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<ChangeDataType idx='1220' x='2439.54' y='4303.06' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<Python idx='1221' x='1892.48' y='50.9713' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<SelectColumns module='DefaultActions' idx='1227' x='393.726' y='131.057' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<SelectColumns module='DefaultActions' idx='1228' x='391.653' y='224.308' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<Python idx='1229' x='526.349' y='126.912' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<Python idx='1230' x='526.349' y='222.235' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<Calculator module='MathParser' idx='1231' x='652.756' y='128.985'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<Calculator module='MathParser' idx='1232' x='648.611' y='216.019'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<ChangeDataType idx='1233' x='779.162' y='124.84' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<ChangeDataType idx='1234' x='777.09' y='213.946' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<FilterRows module='MathParser' idx='1235' x='319.125' y='914.364' dateFormat='yyyy-MM-dd hh:mm:ss'>
 <Expression>(dateTimeLE(rt, "2017-12-10 00:00:00")) &amp;&amp; (not(dateTimeLE(rt, "2017-09-09 00:00:00")))</Expression>
 <InputVars>
    <InputVar column='Rounded Time' label='rt' isNumber='0'/>
 </InputVars>
</FilterRows>
<FilterRows module='MathParser' idx='1236' x='314.98' y='1003.47' dateFormat='yyyy-MM-dd hh:mm:ss'>
 <Expression>(dateTimeLE(rt, "2018-03-11 00:00:00")) &amp;&amp; (not(dateTimeLE(rt, "2017-12-10 00:00:00")))</Expression>
 <InputVars>
    <InputVar column='Rounded Time' label='rt' isNumber='0'/>
 </InputVars>
</FilterRows>
<FilterRows module='MathParser' idx='1237' x='321.197' y='1807.5' dateFormat='yyyy-MM-dd hh:mm:ss'>
 <Expression>(dateTimeLE(rt, "2017-12-10 00:00:00")) &amp;&amp; (not(dateTimeLE(rt, "2017-09-09 00:00:00")))</Expression>
 <InputVars>
    <InputVar column='Rounded Time' label='rt' isNumber='0'/>
 </InputVars>
</FilterRows>
<FilterRows module='MathParser' idx='1238' x='370.931' y='2659.19' dateFormat='yyyy-MM-dd hh:mm:ss'>
 <Expression>(dateTimeLE(rt, "2017-12-10 00:00:00")) &amp;&amp; (not(dateTimeLE(rt, "2017-09-09 00:00:00")))</Expression>
 <InputVars>
    <InputVar column='Rounded Time' label='rt' isNumber='0'/>
 </InputVars>
</FilterRows>
<FilterRows module='MathParser' idx='1239' x='426.881' y='3425.92' dateFormat='yyyy-MM-dd hh:mm:ss'>
 <Expression>(dateTimeLE(rt, "2017-12-10 00:00:00")) &amp;&amp; (not(dateTimeLE(rt, "2017-09-09 00:00:00")))</Expression>
 <InputVars>
    <InputVar column='Rounded Time' label='rt' isNumber='0'/>
 </InputVars>
</FilterRows>
<FilterRows module='MathParser' idx='1240' x='317.053' y='1906.97' dateFormat='yyyy-MM-dd hh:mm:ss'>
 <Expression>(dateTimeLE(rt, "2018-03-11 00:00:00")) &amp;&amp; (not(dateTimeLE(rt, "2017-12-10 00:00:00")))</Expression>
 <InputVars>
    <InputVar column='Rounded Time' label='rt' isNumber='0'/>
 </InputVars>
</FilterRows>
<FilterRows module='MathParser' idx='1243' x='368.859' y='2744.15' dateFormat='yyyy-MM-dd hh:mm:ss'>
 <Expression>(dateTimeLE(rt, "2018-03-11 00:00:00")) &amp;&amp; (not(dateTimeLE(rt, "2017-12-10 00:00:00")))</Expression>
 <InputVars>
    <InputVar column='Rounded Time' label='rt' isNumber='0'/>
 </InputVars>
</FilterRows>
<FilterRows module='MathParser' idx='1244' x='426.881' y='3523.31' dateFormat='yyyy-MM-dd hh:mm:ss'>
 <Expression>(dateTimeLE(rt, "2018-03-11 00:00:00")) &amp;&amp; (not(dateTimeLE(rt, "2017-12-10 00:00:00")))</Expression>
 <InputVars>
    <InputVar column='Rounded Time' label='rt' isNumber='0'/>
 </InputVars>
</FilterRows>
<FilterRows module='MathParser' idx='1245' x='395.798' y='4190.57' dateFormat='yyyy-MM-dd hh:mm:ss'>
 <Expression>(dateTimeLE(rt, "2017-12-10 00:00:00")) &amp;&amp; (not(dateTimeLE(rt, "2017-09-09 00:00:00")))</Expression>
 <InputVars>
    <InputVar column='Rounded Time' label='rt' isNumber='0'/>
 </InputVars>
</FilterRows>
<FilterRows module='MathParser' idx='1246' x='397.87' y='4281.75' dateFormat='yyyy-MM-dd hh:mm:ss'>
 <Expression>(dateTimeLE(rt, "2018-03-11 00:00:00")) &amp;&amp; (not(dateTimeLE(rt, "2017-12-10 00:00:00")))</Expression>
 <InputVars>
    <InputVar column='Rounded Time' label='rt' isNumber='0'/>
 </InputVars>
</FilterRows>
<SelectColumns module='DefaultActions' idx='1248' x='435.17' y='920.58' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<SelectColumns module='DefaultActions' idx='1249' x='426.881' y='1001.4' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<Python idx='1250' x='561.577' y='914.364' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<Python idx='1251' x='561.577' y='999.325' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<Calculator module='MathParser' idx='1252' x='700.417' y='916.436'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<Calculator module='MathParser' idx='1253' x='694.2' y='1001.4'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<ChangeDataType idx='1254' x='818.535' y='916.436' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<ChangeDataType idx='1255' x='822.679' y='999.325' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<SelectColumns module='DefaultActions' idx='1256' x='451.748' y='1803.35' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<SelectColumns module='DefaultActions' idx='1257' x='451.748' y='1898.68' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<Python idx='1258' x='596.805' y='1807.5' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<Python idx='1259' x='596.805' y='1892.46' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<Calculator module='MathParser' idx='1260' x='735.645' y='1803.35'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<Calculator module='MathParser' idx='1261' x='737.717' y='1894.53'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<ChangeDataType idx='1262' x='859.98' y='1803.35' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<ChangeDataType idx='1263' x='870.341' y='1896.61' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<SelectColumns module='DefaultActions' idx='1264' x='520.132' y='2663.33' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<SelectColumns module='DefaultActions' idx='1265' x='522.204' y='2756.58' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<Python idx='1266' x='656.9' y='2659.19' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<Python idx='1267' x='648.611' y='2748.3' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<Calculator module='MathParser' idx='1268' x='785.379' y='2659.19'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<Calculator module='MathParser' idx='1269' x='789.523' y='2748.3'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<ChangeDataType idx='1270' x='924.219' y='2663.33' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<ChangeDataType idx='1271' x='922.147' y='2748.3' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<SelectColumns module='DefaultActions' idx='1272' x='561.577' y='3423.85' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<SelectColumns module='DefaultActions' idx='1273' x='563.649' y='3525.39' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<Python idx='1274' x='719.067' y='3430.06' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<Python idx='1275' x='721.14' y='3519.17' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<Calculator module='MathParser' idx='1276' x='841.329' y='3427.99'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<Calculator module='MathParser' idx='1277' x='845.474' y='3519.17'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<ChangeDataType idx='1278' x='969.808' y='3430.06' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<ChangeDataType idx='1279' x='973.953' y='3523.31' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<SelectColumns module='DefaultActions' idx='1280' x='538.782' y='4188.5' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<SelectColumns module='DefaultActions' idx='1281' x='540.855' y='4277.61' keep='0'>
 <c>Rounded Time</c>
</SelectColumns>
<Python idx='1282' x='690.056' y='4188.5' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<Python idx='1283' x='681.767' y='4285.9' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
<Calculator module='MathParser' idx='1284' x='824.752' y='4178.14'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<Calculator module='MathParser' idx='1285' x='820.607' y='4279.68'>
  <InputVars>
    <InputVar column='C0' label='c' meta='F'/>
  </InputVars>
  <OutputVars>
    <OutputVar name='Percent'>c*100</OutputVar>
  </OutputVars>
</Calculator>
<ChangeDataType idx='1286' x='944.941' y='4182.29' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<ChangeDataType idx='1287' x='951.158' y='4285.9' floatToString='%5.3f'>
<toStringFromFloat><c>Percent</c></toStringFromFloat>
</ChangeDataType>
<Python idx='1288' x='1903.35' y='-130.991' id='My_pythonTemplate'
  orignalId='pythonTemplate'
 deprecated='1'
  longName='this operator simply &quot;pass by&quot; the rows without doing anything'
  image='PythonTemplate.png'
  author='Frank Vanden Berghen'
  revision='0.01'
  tags='390_Python'
  pdfDestination='9_2_3_python_integration_inside'>
<Description>
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:&apos;MS Shell Dlg 2&apos;; font-size:21px; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:21px;&quot;&gt;This operator simply &amp;quot;pass by&amp;quot; the rows from the input pin to the output pin without doing any treatment.&lt;br /&gt;This operator is simply a &amp;quot;Basic Template&amp;quot; that you can can &amp;quot;tweak&amp;quot; to create your own, complex operator.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</Description>
<Parameters>
  <Parameter id='mytable' text='whole table' type='allcolumns'></Parameter>
</Parameters>
<Script>
from sklearn.decomposition import PCA
import pandas


pca = PCA(n_components=5)
principalComponents = pca.fit_transform(mytable)

df = pandas.DataFrame(pca.explained_variance_ratio_)


Py_Output = df



print(pca.explained_variance_ratio_)
</Script>
</Python>
</ACTIONS>
<CONNECTORS>
<Connection idxSrc='1' idxDest='5' idxPinIn='1'/>
<Connection idxSrc='2' idxDest='5' idxPinIn='2'/>
<Connection idxSrc='3' idxDest='5' idxPinIn='3'/>
<Connection idxSrc='4' idxDest='5' idxPinIn='4'/>
<Connection idxSrc='0' idxDest='6'/>
<Connection idxSrc='6' idxDest='5'/>
<Connection idxSrc='5' idxDest='7'/>
<Connection idxSrc='7' idxDest='8'/>
<Connection idxSrc='13' idxDest='16'/>
<Connection idxSrc='16' idxDest='18'/>
<Connection idxSrc='12' idxDest='18' idxPinIn='1'/>
<Connection idxSrc='14' idxDest='18' idxPinIn='2'/>
<Connection idxSrc='11' idxDest='18' idxPinIn='3'/>
<Connection idxSrc='15' idxDest='18' idxPinIn='4'/>
<Connection idxSrc='18' idxDest='19'/>
<Connection idxSrc='5' idxDest='785'/>
<Connection idxSrc='5' idxDest='786'/>
<Connection idxSrc='5' idxDest='787'/>
<Connection idxSrc='5' idxDest='788'/>
<Connection idxSrc='785' idxDest='789'/>
<Connection idxSrc='789' idxDest='793'/>
<Connection idxSrc='786' idxDest='790'/>
<Connection idxSrc='790' idxDest='794'/>
<Connection idxSrc='787' idxDest='791'/>
<Connection idxSrc='791' idxDest='795'/>
<Connection idxSrc='788' idxDest='792'/>
<Connection idxSrc='792' idxDest='796'/>
<Connection idxSrc='818' idxDest='817'/>
<Connection idxSrc='817' idxDest='812'/>
<Connection idxSrc='816' idxDest='812' idxPinIn='1'/>
<Connection idxSrc='815' idxDest='812' idxPinIn='2'/>
<Connection idxSrc='814' idxDest='812' idxPinIn='3'/>
<Connection idxSrc='813' idxDest='812' idxPinIn='4'/>
<Connection idxSrc='812' idxDest='810'/>
<Connection idxSrc='812' idxDest='805'/>
<Connection idxSrc='812' idxDest='806'/>
<Connection idxSrc='812' idxDest='808'/>
<Connection idxSrc='812' idxDest='809'/>
<Connection idxSrc='810' idxDest='811'/>
<Connection idxSrc='805' idxDest='801'/>
<Connection idxSrc='801' idxDest='797'/>
<Connection idxSrc='806' idxDest='802'/>
<Connection idxSrc='802' idxDest='798'/>
<Connection idxSrc='808' idxDest='803'/>
<Connection idxSrc='803' idxDest='799'/>
<Connection idxSrc='809' idxDest='804'/>
<Connection idxSrc='804' idxDest='800'/>
<Connection idxSrc='839' idxDest='823'/>
<Connection idxSrc='823' idxDest='845'/>
<Connection idxSrc='822' idxDest='845' idxPinIn='1'/>
<Connection idxSrc='821' idxDest='845' idxPinIn='2'/>
<Connection idxSrc='820' idxDest='845' idxPinIn='3'/>
<Connection idxSrc='819' idxDest='845' idxPinIn='4'/>
<Connection idxSrc='840' idxDest='836'/>
<Connection idxSrc='836' idxDest='843'/>
<Connection idxSrc='833' idxDest='843' idxPinIn='1'/>
<Connection idxSrc='830' idxDest='843' idxPinIn='2'/>
<Connection idxSrc='825' idxDest='843' idxPinIn='3'/>
<Connection idxSrc='824' idxDest='843' idxPinIn='4'/>
<Connection idxSrc='841' idxDest='838'/>
<Connection idxSrc='838' idxDest='844'/>
<Connection idxSrc='835' idxDest='844' idxPinIn='1'/>
<Connection idxSrc='832' idxDest='844' idxPinIn='2'/>
<Connection idxSrc='829' idxDest='844' idxPinIn='3'/>
<Connection idxSrc='827' idxDest='844' idxPinIn='4'/>
<Connection idxSrc='842' idxDest='837'/>
<Connection idxSrc='837' idxDest='846'/>
<Connection idxSrc='834' idxDest='846' idxPinIn='1'/>
<Connection idxSrc='831' idxDest='846' idxPinIn='2'/>
<Connection idxSrc='828' idxDest='846' idxPinIn='3'/>
<Connection idxSrc='826' idxDest='846' idxPinIn='4'/>
<Connection idxSrc='919' idxDest='940'/>
<Connection idxSrc='918' idxDest='941' idxPinIn='1'/>
<Connection idxSrc='940' idxDest='941'/>
<Connection idxSrc='916' idxDest='941' idxPinIn='3'/>
<Connection idxSrc='915' idxDest='941' idxPinIn='4'/>
<Connection idxSrc='920' idxDest='942'/>
<Connection idxSrc='942' idxDest='947'/>
<Connection idxSrc='921' idxDest='947' idxPinIn='1'/>
<Connection idxSrc='932' idxDest='947' idxPinIn='3'/>
<Connection idxSrc='936' idxDest='947' idxPinIn='4'/>
<Connection idxSrc='1023' idxDest='941' idxPinIn='2'/>
<Connection idxSrc='1024' idxDest='947' idxPinIn='2'/>
<Connection idxSrc='922' idxDest='943'/>
<Connection idxSrc='943' idxDest='948'/>
<Connection idxSrc='925' idxDest='948' idxPinIn='1'/>
<Connection idxSrc='1025' idxDest='948' idxPinIn='2'/>
<Connection idxSrc='933' idxDest='948' idxPinIn='3'/>
<Connection idxSrc='937' idxDest='948' idxPinIn='4'/>
<Connection idxSrc='923' idxDest='944'/>
<Connection idxSrc='944' idxDest='949'/>
<Connection idxSrc='926' idxDest='949' idxPinIn='1'/>
<Connection idxSrc='1026' idxDest='949' idxPinIn='2'/>
<Connection idxSrc='934' idxDest='949' idxPinIn='3'/>
<Connection idxSrc='938' idxDest='949' idxPinIn='4'/>
<Connection idxSrc='924' idxDest='945'/>
<Connection idxSrc='945' idxDest='950'/>
<Connection idxSrc='927' idxDest='950' idxPinIn='1'/>
<Connection idxSrc='935' idxDest='950' idxPinIn='3'/>
<Connection idxSrc='939' idxDest='950' idxPinIn='4'/>
<Connection idxSrc='1027' idxDest='950' idxPinIn='2'/>
<Connection idxSrc='845' idxDest='866'/>
<Connection idxSrc='845' idxDest='864'/>
<Connection idxSrc='845' idxDest='862'/>
<Connection idxSrc='845' idxDest='860'/>
<Connection idxSrc='845' idxDest='858'/>
<Connection idxSrc='866' idxDest='886'/>
<Connection idxSrc='864' idxDest='884'/>
<Connection idxSrc='862' idxDest='882'/>
<Connection idxSrc='884' idxDest='902'/>
<Connection idxSrc='882' idxDest='899'>
  <Point x='561.447' y='1524.87'/>
</Connection>
<Connection idxSrc='860' idxDest='880'/>
<Connection idxSrc='880' idxDest='896'/>
<Connection idxSrc='858' idxDest='878'/>
<Connection idxSrc='878' idxDest='893'/>
<Connection idxSrc='843' idxDest='865'/>
<Connection idxSrc='865' idxDest='885'/>
<Connection idxSrc='843' idxDest='863'/>
<Connection idxSrc='843' idxDest='861'/>
<Connection idxSrc='843' idxDest='859'/>
<Connection idxSrc='843' idxDest='857'/>
<Connection idxSrc='863' idxDest='883'/>
<Connection idxSrc='861' idxDest='881'/>
<Connection idxSrc='859' idxDest='879'/>
<Connection idxSrc='857' idxDest='877'/>
<Connection idxSrc='883' idxDest='901'/>
<Connection idxSrc='881' idxDest='898'/>
<Connection idxSrc='879' idxDest='895'/>
<Connection idxSrc='877' idxDest='892'/>
<Connection idxSrc='844' idxDest='856'/>
<Connection idxSrc='856' idxDest='876'/>
<Connection idxSrc='844' idxDest='855'/>
<Connection idxSrc='855' idxDest='875'/>
<Connection idxSrc='875' idxDest='900'/>
<Connection idxSrc='844' idxDest='854'/>
<Connection idxSrc='854' idxDest='874'/>
<Connection idxSrc='874' idxDest='897'/>
<Connection idxSrc='844' idxDest='853'/>
<Connection idxSrc='844' idxDest='852'/>
<Connection idxSrc='853' idxDest='873'/>
<Connection idxSrc='873' idxDest='894'/>
<Connection idxSrc='852' idxDest='872'/>
<Connection idxSrc='872' idxDest='891'/>
<Connection idxSrc='846' idxDest='851'/>
<Connection idxSrc='851' idxDest='871'/>
<Connection idxSrc='846' idxDest='850'/>
<Connection idxSrc='846' idxDest='849'/>
<Connection idxSrc='846' idxDest='848'/>
<Connection idxSrc='846' idxDest='847'/>
<Connection idxSrc='850' idxDest='870'/>
<Connection idxSrc='870' idxDest='890'/>
<Connection idxSrc='849' idxDest='869'/>
<Connection idxSrc='869' idxDest='889'/>
<Connection idxSrc='848' idxDest='868'/>
<Connection idxSrc='868' idxDest='888'/>
<Connection idxSrc='847' idxDest='867'/>
<Connection idxSrc='867' idxDest='887'/>
<Connection idxSrc='950' idxDest='968'/>
<Connection idxSrc='968' idxDest='986'/>
<Connection idxSrc='950' idxDest='963'/>
<Connection idxSrc='950' idxDest='959'/>
<Connection idxSrc='950' idxDest='1028'/>
<Connection idxSrc='950' idxDest='911'/>
<Connection idxSrc='963' idxDest='990'/>
<Connection idxSrc='959' idxDest='994'/>
<Connection idxSrc='1028' idxDest='998'/>
<Connection idxSrc='911' idxDest='1002'/>
<Connection idxSrc='990' idxDest='1008'/>
<Connection idxSrc='994' idxDest='1012'/>
<Connection idxSrc='998' idxDest='1017'/>
<Connection idxSrc='1002' idxDest='1022'/>
<Connection idxSrc='949' idxDest='967'/>
<Connection idxSrc='949' idxDest='962'/>
<Connection idxSrc='949' idxDest='958'/>
<Connection idxSrc='949' idxDest='1031'/>
<Connection idxSrc='949' idxDest='908'/>
<Connection idxSrc='967' idxDest='984'/>
<Connection idxSrc='962' idxDest='989'/>
<Connection idxSrc='989' idxDest='1007'/>
<Connection idxSrc='958' idxDest='993'/>
<Connection idxSrc='993' idxDest='1011'/>
<Connection idxSrc='1031' idxDest='997'/>
<Connection idxSrc='997' idxDest='1016'/>
<Connection idxSrc='908' idxDest='1001'/>
<Connection idxSrc='1001' idxDest='1021'/>
<Connection idxSrc='948' idxDest='966'/>
<Connection idxSrc='948' idxDest='961'/>
<Connection idxSrc='948' idxDest='957'/>
<Connection idxSrc='948' idxDest='1030'/>
<Connection idxSrc='948' idxDest='910'/>
<Connection idxSrc='966' idxDest='985'/>
<Connection idxSrc='961' idxDest='988'/>
<Connection idxSrc='988' idxDest='1006'/>
<Connection idxSrc='957' idxDest='992'/>
<Connection idxSrc='992' idxDest='1010'/>
<Connection idxSrc='1030' idxDest='996'/>
<Connection idxSrc='996' idxDest='1015'/>
<Connection idxSrc='910' idxDest='1000'/>
<Connection idxSrc='1000' idxDest='1020'/>
<Connection idxSrc='947' idxDest='965'/>
<Connection idxSrc='947' idxDest='960'/>
<Connection idxSrc='947' idxDest='956'/>
<Connection idxSrc='947' idxDest='1029'/>
<Connection idxSrc='947' idxDest='909'/>
<Connection idxSrc='965' idxDest='983'/>
<Connection idxSrc='960' idxDest='987'/>
<Connection idxSrc='987' idxDest='1005'/>
<Connection idxSrc='956' idxDest='991'/>
<Connection idxSrc='991' idxDest='1009'/>
<Connection idxSrc='1029' idxDest='995'/>
<Connection idxSrc='995' idxDest='1014'/>
<Connection idxSrc='909' idxDest='999'/>
<Connection idxSrc='999' idxDest='1019'/>
<Connection idxSrc='941' idxDest='964'/>
<Connection idxSrc='941' idxDest='914'/>
<Connection idxSrc='941' idxDest='913'/>
<Connection idxSrc='941' idxDest='912'/>
<Connection idxSrc='941' idxDest='907'/>
<Connection idxSrc='964' idxDest='982'/>
<Connection idxSrc='914' idxDest='981'/>
<Connection idxSrc='913' idxDest='980'/>
<Connection idxSrc='912' idxDest='979'/>
<Connection idxSrc='907' idxDest='978'/>
<Connection idxSrc='981' idxDest='1003'/>
<Connection idxSrc='980' idxDest='1004'/>
<Connection idxSrc='979' idxDest='1013'/>
<Connection idxSrc='978' idxDest='1018'/>
<Connection idxSrc='18' idxDest='903'/>
<Connection idxSrc='18' idxDest='904'/>
<Connection idxSrc='18' idxDest='905'/>
<Connection idxSrc='18' idxDest='906'/>
<Connection idxSrc='905' idxDest='972'/>
<Connection idxSrc='906' idxDest='973'/>
<Connection idxSrc='972' idxDest='975'/>
<Connection idxSrc='904' idxDest='971'/>
<Connection idxSrc='903' idxDest='970'/>
<Connection idxSrc='19' idxDest='969'/>
<Connection idxSrc='970' idxDest='977'/>
<Connection idxSrc='982' idxDest='1036'/>
<Connection idxSrc='1036' idxDest='1034'/>
<Connection idxSrc='969' idxDest='1037'/>
<Connection idxSrc='1037' idxDest='1038'/>
<Connection idxSrc='983' idxDest='1039'/>
<Connection idxSrc='1039' idxDest='1040'/>
<Connection idxSrc='985' idxDest='1041'/>
<Connection idxSrc='1041' idxDest='1042'/>
<Connection idxSrc='984' idxDest='1043'/>
<Connection idxSrc='1043' idxDest='1044'/>
<Connection idxSrc='986' idxDest='1045'/>
<Connection idxSrc='1045' idxDest='1046'/>
<Connection idxSrc='8' idxDest='1047'/>
<Connection idxSrc='1047' idxDest='1048'/>
<Connection idxSrc='811' idxDest='1049'/>
<Connection idxSrc='1049' idxDest='1050'/>
<Connection idxSrc='886' idxDest='1051'/>
<Connection idxSrc='1051' idxDest='1052'/>
<Connection idxSrc='885' idxDest='1053'/>
<Connection idxSrc='1053' idxDest='1054'/>
<Connection idxSrc='876' idxDest='1055'/>
<Connection idxSrc='1055' idxDest='1056'/>
<Connection idxSrc='871' idxDest='1057'/>
<Connection idxSrc='1057' idxDest='1058'/>
<Connection idxSrc='1085' idxDest='1088'/>
<Connection idxSrc='1095' idxDest='1098'/>
<Connection idxSrc='1109' idxDest='1112'/>
<Connection idxSrc='1110' idxDest='1113'/>
<Connection idxSrc='793' idxDest='1059'/>
<Connection idxSrc='794' idxDest='1060'/>
<Connection idxSrc='795' idxDest='1061'/>
<Connection idxSrc='796' idxDest='1062'/>
<Connection idxSrc='1062' idxDest='1066'/>
<Connection idxSrc='1061' idxDest='1065'/>
<Connection idxSrc='1060' idxDest='1064'/>
<Connection idxSrc='1059' idxDest='1063'/>
<Connection idxSrc='797' idxDest='1115'/>
<Connection idxSrc='798' idxDest='1116'/>
<Connection idxSrc='799' idxDest='1117'/>
<Connection idxSrc='800' idxDest='1118'/>
<Connection idxSrc='1115' idxDest='1135'/>
<Connection idxSrc='1116' idxDest='1136'/>
<Connection idxSrc='1117' idxDest='1137'/>
<Connection idxSrc='1118' idxDest='1138'/>
<Connection idxSrc='902' idxDest='1107'/>
<Connection idxSrc='899' idxDest='1109'/>
<Connection idxSrc='896' idxDest='1110'/>
<Connection idxSrc='893' idxDest='1111'/>
<Connection idxSrc='1111' idxDest='1114'/>
<Connection idxSrc='1107' idxDest='1108'/>
<Connection idxSrc='901' idxDest='1099'/>
<Connection idxSrc='898' idxDest='1103'/>
<Connection idxSrc='895' idxDest='1104'/>
<Connection idxSrc='892' idxDest='1105'/>
<Connection idxSrc='1099' idxDest='1100'/>
<Connection idxSrc='1103' idxDest='1101'/>
<Connection idxSrc='1104' idxDest='1102'/>
<Connection idxSrc='1105' idxDest='1106'/>
<Connection idxSrc='900' idxDest='1119'/>
<Connection idxSrc='897' idxDest='1121'/>
<Connection idxSrc='894' idxDest='1122'/>
<Connection idxSrc='891' idxDest='1123'/>
<Connection idxSrc='1123' idxDest='1126'/>
<Connection idxSrc='1122' idxDest='1125'/>
<Connection idxSrc='1121' idxDest='1124'/>
<Connection idxSrc='1119' idxDest='1120'/>
<Connection idxSrc='890' idxDest='1127'/>
<Connection idxSrc='889' idxDest='1128'/>
<Connection idxSrc='888' idxDest='1129'/>
<Connection idxSrc='887' idxDest='1130'/>
<Connection idxSrc='1130' idxDest='1134'/>
<Connection idxSrc='1129' idxDest='1133'/>
<Connection idxSrc='1128' idxDest='1132'/>
<Connection idxSrc='1127' idxDest='1131'/>
<Connection idxSrc='977' idxDest='1067'/>
<Connection idxSrc='975' idxDest='1070'/>
<Connection idxSrc='1071' idxDest='1074'/>
<Connection idxSrc='1070' idxDest='1073'/>
<Connection idxSrc='1069' idxDest='1072'/>
<Connection idxSrc='1067' idxDest='1068'/>
<Connection idxSrc='1003' idxDest='1075'/>
<Connection idxSrc='1004' idxDest='1077'/>
<Connection idxSrc='1013' idxDest='1078'/>
<Connection idxSrc='1018' idxDest='1079'/>
<Connection idxSrc='1079' idxDest='1082'/>
<Connection idxSrc='1078' idxDest='1081'/>
<Connection idxSrc='1077' idxDest='1080'/>
<Connection idxSrc='1075' idxDest='1076'/>
<Connection idxSrc='1005' idxDest='1083'/>
<Connection idxSrc='1009' idxDest='1085'/>
<Connection idxSrc='1014' idxDest='1086'/>
<Connection idxSrc='1019' idxDest='1087'/>
<Connection idxSrc='1087' idxDest='1090'/>
<Connection idxSrc='1086' idxDest='1089'/>
<Connection idxSrc='1083' idxDest='1084'/>
<Connection idxSrc='1006' idxDest='1091'/>
<Connection idxSrc='1010' idxDest='1093'/>
<Connection idxSrc='1015' idxDest='1094'/>
<Connection idxSrc='1020' idxDest='1095'/>
<Connection idxSrc='1094' idxDest='1097'/>
<Connection idxSrc='1093' idxDest='1096'/>
<Connection idxSrc='1091' idxDest='1092'/>
<Connection idxSrc='1007' idxDest='1139'/>
<Connection idxSrc='1011' idxDest='1140'/>
<Connection idxSrc='1139' idxDest='1143'/>
<Connection idxSrc='1140' idxDest='1144'/>
<Connection idxSrc='1016' idxDest='1141'/>
<Connection idxSrc='1021' idxDest='1142'/>
<Connection idxSrc='1142' idxDest='1146'/>
<Connection idxSrc='1141' idxDest='1145'/>
<Connection idxSrc='1008' idxDest='1147'/>
<Connection idxSrc='1012' idxDest='1148'/>
<Connection idxSrc='1017' idxDest='1149'/>
<Connection idxSrc='1022' idxDest='1150'/>
<Connection idxSrc='1150' idxDest='1154'/>
<Connection idxSrc='1149' idxDest='1153'/>
<Connection idxSrc='1148' idxDest='1152'/>
<Connection idxSrc='1147' idxDest='1151'/>
<Connection idxSrc='1198' idxDest='1200'/>
<Connection idxSrc='1205' idxDest='1207'/>
<Connection idxSrc='1168' idxDest='1213'/>
<Connection idxSrc='1214' idxDest='1216'/>
<Connection idxSrc='1218' idxDest='1220'/>
<Connection idxSrc='1157' idxDest='1172'/>
<Connection idxSrc='1158' idxDest='1173'/>
<Connection idxSrc='1172' idxDest='1174'/>
<Connection idxSrc='1173' idxDest='1175'/>
<Connection idxSrc='1174' idxDest='1176'/>
<Connection idxSrc='1175' idxDest='1177'/>
<Connection idxSrc='1176' idxDest='1178'/>
<Connection idxSrc='1177' idxDest='1179'/>
<Connection idxSrc='18' idxDest='1157'/>
<Connection idxSrc='18' idxDest='1158'/>
<Connection idxSrc='941' idxDest='1160'/>
<Connection idxSrc='941' idxDest='1161'/>
<Connection idxSrc='1160' idxDest='1180'/>
<Connection idxSrc='1161' idxDest='1181'/>
<Connection idxSrc='1180' idxDest='1183'/>
<Connection idxSrc='1181' idxDest='1184'/>
<Connection idxSrc='1184' idxDest='1186'/>
<Connection idxSrc='1183' idxDest='1185'/>
<Connection idxSrc='1185' idxDest='1187'/>
<Connection idxSrc='1186' idxDest='1188'/>
<Connection idxSrc='947' idxDest='1162'/>
<Connection idxSrc='947' idxDest='1165'/>
<Connection idxSrc='1162' idxDest='1189'/>
<Connection idxSrc='1165' idxDest='1190'/>
<Connection idxSrc='1189' idxDest='1191'/>
<Connection idxSrc='1190' idxDest='1192'/>
<Connection idxSrc='1191' idxDest='1193'/>
<Connection idxSrc='1192' idxDest='1194'/>
<Connection idxSrc='1193' idxDest='1195'/>
<Connection idxSrc='1194' idxDest='1196'/>
<Connection idxSrc='948' idxDest='1163'/>
<Connection idxSrc='948' idxDest='1166'/>
<Connection idxSrc='1166' idxDest='1198'/>
<Connection idxSrc='1197' idxDest='1199'/>
<Connection idxSrc='1199' idxDest='1201'/>
<Connection idxSrc='1201' idxDest='1203'/>
<Connection idxSrc='1200' idxDest='1202'/>
<Connection idxSrc='1202' idxDest='1204'/>
<Connection idxSrc='1163' idxDest='1197'/>
<Connection idxSrc='949' idxDest='1164'/>
<Connection idxSrc='949' idxDest='1167'/>
<Connection idxSrc='1164' idxDest='1205'/>
<Connection idxSrc='1167' idxDest='1206'/>
<Connection idxSrc='1206' idxDest='1208'/>
<Connection idxSrc='1208' idxDest='1210'/>
<Connection idxSrc='1207' idxDest='1209'/>
<Connection idxSrc='1209' idxDest='1211'/>
<Connection idxSrc='1210' idxDest='1212'/>
<Connection idxSrc='950' idxDest='1168'/>
<Connection idxSrc='950' idxDest='1169'/>
<Connection idxSrc='1169' idxDest='1214'/>
<Connection idxSrc='1213' idxDest='1215'/>
<Connection idxSrc='1215' idxDest='1217'/>
<Connection idxSrc='1216' idxDest='1218'/>
<Connection idxSrc='1217' idxDest='1219'/>
<Connection idxSrc='973' idxDest='1221'/>
<Connection idxSrc='1221' idxDest='1071'/>
<Connection idxSrc='5' idxDest='1170'/>
<Connection idxSrc='5' idxDest='1171'/>
<Connection idxSrc='1170' idxDest='1227'/>
<Connection idxSrc='1171' idxDest='1228'/>
<Connection idxSrc='1227' idxDest='1229'/>
<Connection idxSrc='1228' idxDest='1230'/>
<Connection idxSrc='1229' idxDest='1231'/>
<Connection idxSrc='1230' idxDest='1232'/>
<Connection idxSrc='1231' idxDest='1233'/>
<Connection idxSrc='1232' idxDest='1234'/>
<Connection idxSrc='812' idxDest='1235'/>
<Connection idxSrc='812' idxDest='1236'/>
<Connection idxSrc='1235' idxDest='1248'/>
<Connection idxSrc='1236' idxDest='1249'/>
<Connection idxSrc='1248' idxDest='1250'/>
<Connection idxSrc='1249' idxDest='1251'/>
<Connection idxSrc='1250' idxDest='1252'/>
<Connection idxSrc='1251' idxDest='1253'/>
<Connection idxSrc='1252' idxDest='1254'/>
<Connection idxSrc='1253' idxDest='1255'/>
<Connection idxSrc='845' idxDest='1237'/>
<Connection idxSrc='845' idxDest='1240'/>
<Connection idxSrc='1237' idxDest='1256'/>
<Connection idxSrc='1240' idxDest='1257'/>
<Connection idxSrc='1256' idxDest='1258'/>
<Connection idxSrc='1257' idxDest='1259'/>
<Connection idxSrc='1258' idxDest='1260'/>
<Connection idxSrc='1259' idxDest='1261'/>
<Connection idxSrc='1260' idxDest='1262'/>
<Connection idxSrc='1261' idxDest='1263'/>
<Connection idxSrc='843' idxDest='1238'/>
<Connection idxSrc='843' idxDest='1243'/>
<Connection idxSrc='1238' idxDest='1264'/>
<Connection idxSrc='1243' idxDest='1265'/>
<Connection idxSrc='1264' idxDest='1266'/>
<Connection idxSrc='1265' idxDest='1267'/>
<Connection idxSrc='1266' idxDest='1268'/>
<Connection idxSrc='1267' idxDest='1269'/>
<Connection idxSrc='1268' idxDest='1270'/>
<Connection idxSrc='1269' idxDest='1271'/>
<Connection idxSrc='844' idxDest='1239'/>
<Connection idxSrc='844' idxDest='1244'/>
<Connection idxSrc='1239' idxDest='1272'/>
<Connection idxSrc='1244' idxDest='1273'/>
<Connection idxSrc='1272' idxDest='1274'/>
<Connection idxSrc='1273' idxDest='1275'/>
<Connection idxSrc='1274' idxDest='1276'/>
<Connection idxSrc='1275' idxDest='1277'/>
<Connection idxSrc='1276' idxDest='1278'/>
<Connection idxSrc='1277' idxDest='1279'/>
<Connection idxSrc='846' idxDest='1245'/>
<Connection idxSrc='846' idxDest='1246'/>
<Connection idxSrc='1245' idxDest='1280'/>
<Connection idxSrc='1246' idxDest='1281'/>
<Connection idxSrc='1280' idxDest='1282'/>
<Connection idxSrc='1281' idxDest='1283'/>
<Connection idxSrc='1282' idxDest='1284'/>
<Connection idxSrc='1283' idxDest='1285'/>
<Connection idxSrc='1284' idxDest='1286'/>
<Connection idxSrc='1285' idxDest='1287'/>
<Connection idxSrc='971' idxDest='1288'/>
<Connection idxSrc='1288' idxDest='1069'/>
</CONNECTORS>
<TEXTANNOTATIONS>
  <Annotation x='-389.004' y='-286.248' size='20' bold='1'>PCA - Realized Spread</Annotation>
  <Annotation x='-385.334' y='998.2' size='20' bold='1'>PCA - PPI</Annotation>
  <Annotation x='-356.703' y='1875.84' size='20' bold='1'>PCA - Liquidity</Annotation>
  <Annotation x='-387.162' y='2682.52' size='20' bold='1'>PCA - Return Autocorr</Annotation>
  <Annotation x='-377.148' y='3475.15' size='20' bold='1'>PCA - Realized Volatility</Annotation>
  <Annotation x='-397.87' y='4212.86' size='14' bold='1'>PCA - Quote Return</Annotation>
  <Annotation x='256.72' y='339.267' size='14' bold='1'>Non - standardized</Annotation>
  <Annotation x='317.877' y='1126.75' size='14' bold='1'>Non - standardized</Annotation>
  <Annotation x='320.862' y='2011.73' size='14' bold='1'>Non - standardized</Annotation>
  <Annotation x='383.542' y='2840' size='14' bold='1'>Non - standardized</Annotation>
  <Annotation x='426.821' y='3614.54' size='14' bold='1'>Non - standardized</Annotation>
  <Annotation x='402.943' y='4366.7' size='14' bold='1'>Non - standardized</Annotation>
  <Annotation x='1653.56' y='341.755' size='14' bold='1'>Standardized</Annotation>
  <Annotation x='1790.86' y='1156.59' size='14' bold='1'>Standardized</Annotation>
  <Annotation x='1868.46' y='2034.11' size='14' bold='1'>Standardized</Annotation>
  <Annotation x='1812.41' y='2769.04' size='14' bold='1'>Standardized</Annotation>
  <Annotation x='1820.85' y='3598.21' size='14' bold='1'>Standardized</Annotation>
  <Annotation x='1892.85' y='4391.65' size='14' bold='1'>Standardized</Annotation>
</TEXTANNOTATIONS>
<GROUPBOXANNOTATIONS>
  <Groupbox x='-440.382' y='-403.684' w='3027.63' h='811.037' color='#afeeee'/>
  <Groupbox x='-447.722' y='425.703' w='3031.3' h='818.377' color='#ffdab9'/>
  <Groupbox x='-444.052' y='1262.43' w='3012.95' h='866.085' color='#c1cdc1'/>
  <Groupbox x='-444.052' y='2150.53' w='2998.27' h='693.602' color='#87cefa'/>
  <Groupbox x='-444.052' y='2858.81' w='3001.94' h='818.377' color='#7fffd4'/>
  <Groupbox x='-436.712' y='3699.21' w='3001.94' h='700.942' color='#98fb98'/>
</GROUPBOXANNOTATIONS>
</ANATELLA>
